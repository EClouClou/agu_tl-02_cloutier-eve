{"mappings":"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","sources":["src/assets/js/RGraph.common.csv.js"],"sourcesContent":["'version:2024-06-01 (6.18)';\n//\n    // o---------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:                |\n    // |                                                                                 |\n    // |                       https://www.rgraph.net/license.html                       |\n    // |                                                                                 |\n    // | RGraph is dual-licensed under the Open Source GPL license. That means that it's |\n    // | free to use and there are no restrictions on what you can use RGraph for!       |\n    // | If the GPL license does not suit you however, then there's an inexpensive       |\n    // | commercial license option available. See the URL above for more details.        |\n    // o---------------------------------------------------------------------------------o\n\n    //\n    // Initialise the various objects\n    //\n    RGraph = window.RGraph || {isrgraph:true,isRGraph: true,rgraph:true};\n\n\n    //\n    // This function has been taken out of the RGraph.common.core.js file to\n    // enable the CSV reader to work standalone.\n    //\n    if (!RGraph.AJAX) RGraph.AJAX = function ()\n    {\n        var args = RGraph.getArgs(arguments, 'url,callback');\n\n        // Mozilla, Safari, ...\n        if (window.XMLHttpRequest) {\n            var httpRequest = new XMLHttpRequest();\n\n        // MSIE\n        } else if (window.ActiveXObject) {\n            var httpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n\n        httpRequest.onreadystatechange = function ()\n        {\n            if (this.readyState == 4 && this.status == 200) {\n                this.__user_callback__ = args.callback;\n\n                this.__user_callback__(this.responseText);\n            }\n        }\n\n        httpRequest.open('GET', args.url, true);\n        httpRequest.send();\n    };\n\n\n\n\n\n\n\n\n    //\n    // Use the AJAX function above to fetch a string\n    //\n    if (!RGraph.AJAX.getString) RGraph.AJAX.getString = function ()\n    {\n        var args = RGraph.getArgs(arguments, 'url,callback');\n\n        RGraph.AJAX(args.url, function ()\n        {\n            var str = String(this.responseText);\n\n            args.callback(str);\n        });\n    };\n\n\n\n\n\n\n\n\n    // This function simply creates UID. Formerly the function in\n    // RGraph.common.core.js was being used - but now the CSV code\n    // is now standalone, hence this function\n    if (!RGraph.createUID) RGraph.createUID = function ()\n    {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n        {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n        });\n    };\n\n\n\n\n\n\n\n\n    //\n    // This function allows both object based arguments to functions\n    // and also regular arguments as well.\n    //\n    // You can call it from inside a function like this:\n    //\n    // args = RGraph.HTMLTable.getArgs(arguments, 'object,id,foo,bar');\n    //\n    // So you're passing it the arguments object and a comma seperated list of names\n    // for the arguments.\n    //\n    // @param array args   The arguments object that you get when inside a function\n    // @param string names A comma seperated list of desired names for the arguments\n    //                     eg: 'object,color,size'\n    //\n    if (!RGraph.getArgs) RGraph.getArgs = function (args, names)\n    {\n        var ret   = {};\n        var count = 0;\n        names     = names.trim().split(/ *, */);\n\n        if (   args\n            && args[0]\n            && args.length === 1\n            && typeof args[0][names[0]] !== 'undefined') {\n            \n            for (var i=0; i<names.length; ++i) {\n                if (typeof args[0][names[i]] === 'undefined') {\n                    args[0][names[i]] = null;\n                }\n            }\n\n            return args[0];\n        } else {\n            for (var i in names) {\n                ret[names[i]] = typeof args[count] === 'undefined' ? null : args[count];\n                \n                count += 1;\n            }\n        }\n\n        return ret;\n    };\n\n\n\n\n\n\n\n\n    RGraph.CSV = function ()\n    {\n        var args = RGraph.getArgs(arguments, 'url,callback,separator,eol');\n\n        //\n        // Some default values\n        //\n        this.url       = args.url;\n        this.ready     = args.callback;\n        this.data      = null;\n        this.numrows   = null;\n        this.numcols   = null;\n        this.separator = args.separator || ',';\n        this.endofline = args.eol || /\\r?\\n/;\n        this.uid       = RGraph.createUID();\n\n\n\n\n\n\n\n\n        //\n        // A Custom split function\n        // \n        // @param string str  The CSV string to split\n        // @param mixed  char The character to split on - or it can also be an object like this:\n        //                    {\n        //                        preserve: false, // Whether to preserve whitespace\n        //                        char: ','        // The character to split on\n        //                    }\n        //\n        this.splitCSV = function (str, split)\n        {\n            // Defaults\n            var arr            = [];\n            var field          = '';\n            var inDoubleQuotes = false;\n            var inSingleQuotes = false;\n            var preserve       = (typeof split === 'object' && split.preserve) ? true : false;\n            \n            // The character to split the CSV string on\n            if (typeof split === 'object') {\n                if (typeof split.char === 'string') {\n                    split = split.char;\n                } else {\n                    split = ',';\n                }\n            } // If not an object just leave the char as it's supplied\n\n\n\n            for (var i=0,len=str.length; i<len; i+=1) {\n                \n                char = str.charAt(i);\n                \n                if ( (char === '\"') && !inDoubleQuotes) {\n                    inDoubleQuotes = true;\n                    continue;\n                \n                } else if ( (char === '\"') && inDoubleQuotes) {\n                    inDoubleQuotes = false;\n                    continue;\n                }\n                if ( (char === \"'\") && !inSingleQuotes) {\n                    inSingleQuotes = true;\n                    continue;\n                \n                } else if ( (char === \"'\") && inSingleQuotes) {\n                    inSingleQuotes = false;\n                    continue;\n    \n                } else if (char === split && !inDoubleQuotes && !inSingleQuotes) {\n                    // TODO look ahead in order to allow for multi-character separators\n                    arr.push(field);\n                    field = '';\n                    continue;\n    \n                } else {\n                    field = field + char;\n                }\n            }\n            \n            // Add the last field\n            arr.push(field);\n            \n            // Now trim each value if necessary\n            if (!preserve) {\n                for (i=0,len=arr.length; i<len; i+=1) {\n                    arr[i] = arr[i].trim();\n                }\n            }\n    \n            return arr;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function splits the CSV data into an array so that it can be useful.\n        //\n        this.fetch = function ()\n        {\n            var sep = this.separator,\n                eol = this.endofline,\n                obj = this;\n\n            if (this.url.substring(0,3) === 'id:' || this.url.substring(0,4) === 'str:') {\n\n                // Get rid of any surrounding whitespace\n                if (this.url.substring(0,3) === 'id:') {\n                    var data = document.getElementById(this.url.substring(3)).innerHTML.trim();\n                \n                } else if (this.url.substring(0,4) === 'str:') {\n                    var data = this.url.substring(4).trim();\n                }\n\n                // Store the CSV data on the CSV object (ie - this object)\n                obj.data = data.split(eol);\n\n                // Store the number of rows\n                obj.numrows = obj.data.length;\n\n                for (var i=0,len=obj.data.length; i<len; i+=1) {\n\n\n                    //\n                    // Split the individual line\n                    //\n                    //var row = obj.data[i].split(sep);\n                    var row = obj.splitCSV(obj.data[i], {preserve: false, char: sep});\n\n\n                    if (!obj.numcols) {\n                        obj.numcols = row.length;\n                    }\n\n                    //\n                    // If the cell is purely made up of numbers - convert it\n                    //\n                    for (var j=0; j<row.length; j+=1) {\n                        if ((/^\\-?[0-9.]+$/).test(row[j])) {\n                            row[j] = parseFloat(row[j]);\n                        }\n                            \n                        // Assign the split-up-row back to the data array\n                        obj.data[i] = row;\n                    }\n                }\n                \n                // Call the ready function straight away\n                obj.ready(obj);\n\n            } else {\n\n                RGraph.AJAX.getString({url: this.url, callback: function (data)\n                {\n                    data = data.replace(/(\\r?\\n)+$/, '');\n\n                    //\n                    // Split the lines in the CSV\n                    //\n                    obj.data = data.split(eol);\n\n                    //\n                    // Store the number of rows\n                    //\n                    obj.numrows = obj.data.length;\n\n\n\n                    //\n                    // Loop thru each lines in the CSV file\n                    //\n                    for (var i=0,len=obj.data.length; i<len; i+=1) {\n                        //\n                        // Use the new split function to split each row NOT preserving whitespace\n                        //\n                        //var row = obj.data[i].split(sep);\n                        var row = obj.splitCSV(obj.data[i], {preserve: false, char: sep});\n\n                        if (!obj.numcols) {\n                            obj.numcols = row.length;\n                        }\n\n                        //\n                        // If the cell is purely made up of numbers - convert it\n                        //\n                        for (var j=0; j<row.length; j+=1) {\n                            if ((/^\\-?[0-9.]+$/).test(row[j])) {\n                                row[j] = parseFloat(row[j]);\n                            }\n\n                            // Assign the split-up-row back to the data array\n                            obj.data[i] = row;\n                        }\n                    }\n\n                    // Call the ready function straight away\n                    obj.ready(obj);\n                }});\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Returns a row of the CSV file\n        // \n        // @param number index The index of the row to fetch\n        // @param        start OPTIONAL If desired you can specify a column to\n        //                              start at (which starts at 0 by default)\n        //\n        this.row =\n        this.getRow = function (index)\n        {\n            var row    = [],\n                start  = parseInt(arguments[1]) || 0,\n                length = arguments[2];\n\n            // Convert a string based row name to a\n            // numeric index\n            if (typeof index === 'string') {\n                for (var i=0; i<this.data.length; ++i) {\n                    if (this.data[i][0] === index) {\n                        var found = true;\n                        index = i;\n                        break;\n                    }\n                }\n                \n                if (!found) {\n                    return null;\n                }\n            }\n\n\n            if (start < 0) {\n                row = this.data[index].slice(this.data[index].length  - Math.abs(start));\n            } else {\n                row = this.data[index].slice(start);\n            }\n\n            // Zero length\n            if (typeof length === 'number' && length === 0) {\n                row = [];\n\n            }  else {\n                // Positive length\n                if (typeof length === 'number' && length > 0) {\n                    row = row.slice(0, length)\n                \n                // Negative length\n                } else if (typeof length === 'number' && length < 0) {\n                    for (var i=0; i<Math.abs(length); ++i) {\n                        row.pop();\n                    }\n                }\n            }\n            \n            \n\n            return row;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This fuunction allows you to fetch a column\n        // of the HTML table data.\n        //\n        this.col       =\n        this.column    =\n        this.getColumn =\n        this.getCol    = function (index)\n        {\n            var col    = [],\n                start  = arguments[1] || 0,\n                length = arguments[2];\n\n\n            // Convert a string based column name to a\n            // numeric index\n            if (RGraph.isString(index)) {\n                for (var i=0; i<this.data.length; ++i) {\n                    if (this.data[0][i] === index) {\n                        var found = true;\n                        index = i;\n                        break;\n                    }\n                }\n                \n                if (!found) {\n                    return null;\n                }\n            }\n\n\n            if (start >= 0) {\n                for (var i=start; i<this.data.length; i+=1) {\n                    if (this.data[i]) {\n                        col.push(this.data[i][index]);\n                    } else {\n                        col.push(null);\n                    }\n                }\n            } else {\n                for (var i=(this.data.length - Math.abs(start)); i<this.data.length; i+=1) {\n                    if (this.data[i]) {\n                        col.push(this.data[i][index]);\n                    } else {\n                        col.push(null);\n                    }\n                }\n            }\n\n            // Zero length\n            if (typeof length === 'number' && length === 0) {\n                col = [];\n\n            }  else {\n                // Positive length\n                if (typeof length === 'number' && length > 0) {\n                    col = col.slice(0, length)\n                \n                // Negative length\n                } else if (typeof length === 'number' && length < 0) {\n                    for (var i=0; i<Math.abs(length); ++i) {\n                        col.pop();\n                    }\n                }\n            }\n\n            return col;\n        };\n\n\n\n\n\n\n\n\n\n        // Fetch the CSV file\n        this.fetch();\n    };"],"names":[],"version":3,"file":"index.2e61b263.js.map","sourceRoot":"/__parcel_source_root/"}