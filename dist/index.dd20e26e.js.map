{"mappings":"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","sources":["src/assets/js/RGraph.svg.horseshoe.js"],"sourcesContent":["'version:2024-06-01 (6.18)';\n//\n    // o---------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:                |\n    // |                                                                                 |\n    // |                       https://www.rgraph.net/license.html                       |\n    // |                                                                                 |\n    // | RGraph is dual-licensed under the Open Source GPL license. That means that it's |\n    // | free to use and there are no restrictions on what you can use RGraph for!       |\n    // | If the GPL license does not suit you however, then there's an inexpensive       |\n    // | commercial license option available. See the URL above for more details.        |\n    // o---------------------------------------------------------------------------------o\n\n    RGraph     = window.RGraph || {isrgraph:true,isRGraph:true,rgraph:true};\n    RGraph.SVG = RGraph.SVG || {};\n\n// Module pattern\n(function (win, doc, undefined)\n{\n    RGraph.SVG.Horseshoe = function (conf)\n    {\n        //\n        // A setter that the constructor uses (at the end)\n        // to set all of the properties\n        //\n        // @param string name  The name of the property to set\n        // @param string value The value to set the property to\n        //\n        this.set = function (name, value)\n        {\n            if (arguments.length === 1 && typeof name === 'object') {\n                for (i in arguments[0]) {\n                    if (typeof i === 'string') {\n                        \n                        name  = ret.name;\n                        value = ret.value;\n\n                        this.set(name, value);\n                    }\n                }\n            } else {\n\n                // Go through all of the properties and make sure\n                // that they're using the correct capitalisation\n                name = this.properties_lowercase_map[name.toLowerCase()] || name;\n\n                var ret = RGraph.SVG.commonSetter({\n                    object: this,\n                    name:   name,\n                    value:  value\n                });\n                \n                name  = ret.name;\n                value = ret.value;\n\n                this.properties[name] = value;\n            }\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A getter.\n        // \n        // @param name  string The name of the property to get\n        //\n        this.get = function (name)\n        {\n            // Go through all of the properties and make sure\n            // that they're using the correct capitalisation\n            name = this.properties_lowercase_map[name.toLowerCase()] || name;\n\n            return this.properties[name];\n        };\n\n\n\n\n\n\n\n        this.type            = 'horseshoe';\n        this.min             = RGraph.SVG.stringsToNumbers(conf.min);\n        this.max             = RGraph.SVG.stringsToNumbers(conf.max);\n        this.value           = RGraph.SVG.stringsToNumbers(conf.value);\n        this.currentValue    = null; // Used by animations\n        this.id              = conf.id;\n        this.uid             = RGraph.SVG.createUID();\n        this.container       = document.getElementById(this.id);\n        this.layers          = {}; // MUST be before the SVG tag is created!\n        this.svg             = RGraph.SVG.createSVG({object: this,container: this.container});\n        this.svgAllGroup     = RGraph.SVG.createAllGroup(this);\n        this.clipid          = null; // Used to clip the canvas\n        this.isRGraph        = true;\n        this.isrgraph        = true;\n        this.rgraph          = true;\n        this.width           = Number(this.svg.getAttribute('width'));\n        this.height          = Number(this.svg.getAttribute('height'));\n        this.colorsParsed    = false;\n        this.originalColors  = {};\n        this.gradientCounter = 1;\n        this.nodes           = {};\n        this.firstDraw        = true; // After the first draw this will be false\n\n        // Bounds checking\n        if (this.value > this.max) this.value = this.max;\n        if (this.value < this.min) this.value = this.min;\n\n\n\n\n\n\n\n        // Add this object to the ObjectRegistry\n        RGraph.SVG.OR.add(this);\n\n        // Set the DIV container to be inline-block\n        this.container.style.display = 'inline-block';\n\n        this.properties =\n        {\n            radius:                null,\n            centerx:               null,\n            centery:               null,\n            width:                 10,\n\n            marginLeft:            15,\n            marginRight:           15,\n            marginTop:             15,\n            marginBottom:          15,\n\n            backgroundColor:       null,\n            colors:                ['#2D2D2D','#F2BFAF'],\n            \n            textFont:              'Poppins, sans-serif',\n            textSize:              30,\n            textColor:             '#2D2D2D',\n            textBold:              false,\n            textItalic:            false,\n            text:                  null,\n\n            labelsCenter:          true,\n            labelsCenterFont:      null,\n            labelsCenterSize:      null,\n            labelsCenterColor:     null,\n            labelsCenterBold:      null,\n            labelsCenterItalic:    null,\n            labelsCenterUnitsPre:  '',\n            labelsCenterUnitsPost: '',\n            labelsCenterDecimals:  0,\n            labelsCenterPoint:     '.',\n            labelsCenterThousand:  ',',\n            labelsCenterSpecific:  null,\n            labelsCenterSpecificFormattedDecimals:     0,\n            labelsCenterSpecificFormattedPoint:        '.',\n            labelsCenterSpecificFormattedThousand:     ',',\n            labelsCenterSpecificFormattedUnitsPre:     '',\n            labelsCenterSpecificFormattedUnitsPost:    '',\n            labelsCenterOffsetx:   0,\n            labelsCenterOffsety:   0,\n            \n            ends:                  true,\n            endsRadius:            null,\n            endsStroke:            null,\n            endsColor:             null,\n\n            adjustable:            false,\n            \n            clip: null\n        };\n\n\n\n        //\n        // Add the reverse look-up table  for property names\n        // so that property names can be specified in any case.\n        //\n        this.properties_lowercase_map = [];\n        for (var i in this.properties) {\n            if (typeof i === 'string') {\n                this.properties_lowercase_map[i.toLowerCase()] = i;\n            }\n        }\n\n\n\n\n        //\n        // Copy the global object properties to this instance\n        //\n        RGraph.SVG.getGlobals(this);\n\n\n\n\n\n        //\n        // \"Decorate\" the object with the generic effects if the effects library has been included\n        //\n        if (RGraph.SVG.FX && typeof RGraph.SVG.FX.decorate === 'function') {\n            RGraph.SVG.FX.decorate(this);\n        }\n\n\n\n\n\n        // Add the responsive function to the object\n        this.responsive = RGraph.SVG.responsive;\n\n\n\n\n\n        var properties = this.properties;\n\n\n\n\n\n\n\n\n        //\n        // The draw method draws the Bar chart\n        //\n        this.draw = function ()\n        {\n            // Fire the beforedraw event\n            RGraph.SVG.fireCustomEvent(this, 'onbeforedraw');\n\n\n            // Reset this to prevent it from growing\n            this.nodes = {};\n\n            // Should be the first(ish) thing that's done in the\n            // .draw() function except for the onbeforedraw event\n            // and the installation of clipping.\n            this.width  = Number(this.svg.getAttribute('width'));\n            this.height = Number(this.svg.getAttribute('height'));\n\n\n\n            // Create the defs tag if necessary\n            RGraph.SVG.createDefs(this);\n\n\n\n            // Add these\n            this.graphWidth  = this.width  - properties.marginLeft - properties.marginRight;\n            this.graphHeight = this.height - properties.marginTop  - properties.marginBottom;\n\n\n\n            // Work out the center point\n            this.centerx = (this.graphWidth / 2) + properties.marginLeft;\n            this.centery = (this.graphHeight / 2) + properties.marginTop;\n            this.radius  = Math.min(this.graphWidth / 2, this.graphHeight / 2);\n\n\n\n            // Allow the user to override the calculated centerx/y/radius\n            this.centerx = typeof properties.centerx === 'number' ? properties.centerx : this.centerx;\n            this.centery = typeof properties.centery === 'number' ? properties.centery : this.centery;\n            this.radius  = typeof properties.radius  === 'number' ? properties.radius  : this.radius;\n\n            //\n            // Allow the centerx/centery/radius to be a plus/minus\n            //\n            if (typeof properties.radius  === 'string' && properties.radius.match(/^\\+|-\\d+$/) )  this.radius  += parseFloat(properties.radius);\n            if (typeof properties.centerx === 'string' && properties.centerx.match(/^\\+|-\\d+$/) ) this.centerx += parseFloat(properties.centerx);\n            if (typeof properties.centery === 'string' && properties.centery.match(/^\\+|-\\d+$/) ) this.centery += parseFloat(properties.centery);\n            \n            \n            \n            // Parse the colors for gradients\n            RGraph.SVG.resetColorsToOriginalValues({object:this});\n            this.parseColors();\n            \n            \n            \n            \n            \n            \n            \n            \n\n\n\n\n\n\n            // Install clipping if requested\n            if (this.properties.clip) {\n\n                this.clipid = RGraph.SVG.installClipping(this);\n\n                // Add the clip ID to the all group\n                this.svgAllGroup.setAttribute(\n                    'clip-path',\n                    'url(#{1})'.format(this.clipid)\n                );\n            } else {\n                // No clipping - so ensure that there's no clip-path\n                // attribute\n                this.clipid = null;\n                this.svgAllGroup.removeAttribute('clip-path');\n            }\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n\n\n\n\n\n            // Draw the meter\n            this.drawMeter();\n\n\n\n\n            // Draw the labels\n            this.drawLabels();\n\n\n\n\n\n\n\n\n            //\n            // Ajusting\n            //\n            if (properties.adjustable && !this.adjusting_event_listeners_installed) {\n                \n                this.adjusting_mousedown = false;\n                \n                var obj = this;\n\n                var func = function (e)\n                {\n                    var div     = e.currentTarget,\n                        mouseX  = e.offsetX,\n                        mouseY  = e.offsetY;\n                        \n                        if (RGraph.SVG.ISFF) {\n                            mouseX = e.pageX - e.currentTarget.offsetLeft;\n                            mouseY = e.pageY - e.currentTarget.offsetTop;\n                        }\n\n                    var radius = RGraph.SVG.TRIG.getHypLength({\n                        x1: mouseX,\n                        y1: mouseY,\n                        x2: obj.centerx,\n                        y2: obj.centery,\n                        object: obj\n                    });\n\n                    if (radius > obj.radius) {\n                        return;\n                    }\n\n                    var value = obj.getValue(e);\n\n\n                    obj.value        = value;\n                    obj.currentValue = value;\n\n                    RGraph.SVG.redraw(obj.svg);\n                };\n\n\n\n\n                this.container.addEventListener('mousedown', function (e)\n                {\n                    obj.adjusting_mousedown = true;\n                    func(e);\n\n                    // Fire the beforedraw event\n                    RGraph.SVG.fireCustomEvent(obj, 'onadjustbegin');\n\n                }, false);\n                \n                this.container.addEventListener('mousemove', function (e)\n                {\n                    if (obj.adjusting_mousedown) {\n                        func(e);\n\n                        // Fire the beforedraw event\n                        RGraph.SVG.fireCustomEvent(obj, 'onadjust');\n                    }\n                }, false);\n                \n                window.addEventListener('mouseup', function (e)\n                {\n                    obj.adjusting_mousedown = false;\n                        \n                    // Fire the beforedraw event\n                    RGraph.SVG.fireCustomEvent(obj, 'onadjustend');\n\n                }, false);\n                \n                this.adjusting_event_listeners_installed = true;\n            }\n\n\n\n\n\n\n\n\n            //\n            // Allow the addition of custom text via the\n            // text: property.\n            //\n            RGraph.SVG.addCustomText(this);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            //\n            // Fire the onfirstdraw event\n            //\n            if (this.firstDraw) {\n                this.firstDraw = false;\n                RGraph.SVG.fireCustomEvent(this, 'onfirstdraw');\n            }\n\n\n\n\n            // Fire the draw event\n            RGraph.SVG.fireCustomEvent(this, 'ondraw');\n\n\n\n\n\n\n\n            //\n            // Install any inline responsive configuration. This\n            // should be last in the draw function - even after\n            // the draw events.\n            //\n            RGraph.SVG.installInlineResponsive(this);\n\n\n\n\n\n\n\n\n\n\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // New create() shortcut function\n        // For example:\n        //    this.create('rect,x:0,y:0,width:100,height:100'[,parent]);\n        //\n        // @param str string The tag definition to parse and create\n        // @param     object The (optional) parent element\n        // @return    object The new tag\n        //\n        this.create = function (str)\n        {\n            var def = RGraph.SVG.create.parseStr(this, str);\n            def.svg = this.svg;\n            \n            // By default the parent is the SVG tag - but if\n            // requested then change it to the tag that has\n            // been given\n            if (arguments[1]) {\n                def.parent = arguments[1];\n            }\n\n            return RGraph.SVG.create(def);\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the meter\n        //\n        this.drawMeter = function ()\n        {\n            var width = typeof properties.width === 'number' ? properties.width : this.radius / 2;\n            \n            // Allow for +/-xx style width\n            if (typeof properties.width === 'string') {\n                width += Number(properties.width);\n            }\n            \n            \n            // First thing to do is clear the canvas to the backgroundColor\n            if (properties.backgroundColor) {\n                var rect = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'rect',\n                    parent: this.svgAllGroup, \n                    attr: {\n                        fill: properties.backgroundColor,\n                        x: 0,\n                        y: 0,\n                        width: this.width,\n                        height: this.height\n                    }\n                });\n            }\n        \n\n\n\n    \n            //\n            // Draw the background circular bar (the light gray one)\n            //\n            var path = RGraph.SVG.TRIG.getArcPath3({\n                cx:     this.centerx,\n                cy:     this.centery,\n                radius: this.radius,\n                start:  0,\n                end:    RGraph.SVG.TRIG.TWOPI,\n                lineto: false\n            });\n    \n            var path2 = RGraph.SVG.TRIG.getArcPath3({\n                cx:     this.centerx,\n                cy:     this.centery,\n                radius: this.radius - properties.width,\n                start:  RGraph.SVG.TRIG.TWOPI,\n                end:    0,\n                anticlockwise: true\n            });\n    \n\n            RGraph.SVG.create({\n                svg: this.svg,\n                parent: this.svgAllGroup,\n                type: 'path',\n                attr: {\n                    d: path + ' ' + path2 + ' z',\n                    fill: properties.colors[1]\n                }\n            });\n        \n        \n        \n            //\n            // Draw the indicator bar\n            //\n            var angle = ( (this.value - this.min) / (this.max - this.min) ) * RGraph.SVG.TRIG.TWOPI\n\n            var path = RGraph.SVG.TRIG.getArcPath3({\n                cx:     this.centerx,\n                cy:     this.centery,\n                radius: this.radius,\n                start:  0,\n                end:    angle,\n                lineto: false\n            });\n    \n            var path2 = RGraph.SVG.TRIG.getArcPath3({\n                cx:     this.centerx,\n                cy:     this.centery,\n                radius: this.radius - properties.width,\n                start:  angle,\n                end:    0,\n                anticlockwise: true\n            });\n    \n\n            RGraph.SVG.create({\n                svg: this.svg,\n                parent: this.svgAllGroup,\n                type: 'path',\n                attr: {\n                    d: path + ' ' + path2 + ' z',\n                    fill: properties.colors[0]\n                }\n            });\n            \n            \n            \n            \n            //\n            // Draw the circles at each end of the bar\n            //\n            if (properties.ends) {            \n                // Start of bar\n                RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svgAllGroup,\n                    type: 'circle',\n                    attr: {\n                        cx: this.centerx,\n                        cy:this.centery - this.radius + (properties.width / 2),\n                        r:  typeof properties.endsRadius === 'number' ? properties.endsRadius : properties.width * 1.5,\n                        fill: (properties.endsColor || properties.colors[0]),\n                        stroke: typeof properties.endsStroke === 'string' ? properties.endsStroke : (properties.backgroundColor || 'white'),\n                        'stroke-width': 3\n                    }\n                });\n                \n                // End of bar\n                var endpoint = RGraph.SVG.TRIG.getRadiusEndPoint({\n                    angle:  angle - RGraph.SVG.TRIG.HALFPI,\n                    radius: this.radius - (properties.width / 2)\n                });\n                \n                // Get the endpoint for the end of the bar\n                endpoint[0] += this.centerx;\n                endpoint[1] += this.centery;            \n\n                RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svgAllGroup,\n                    type: 'circle',\n                    attr: {\n                            cx: endpoint[0],\n                            cy: endpoint[1],\n                             r:  typeof properties.endsRadius === 'number' ? properties.endsRadius : properties.width * 1.5,\n                          fill: (properties.endsColor || properties.colors[0]),\n                        stroke: typeof properties.endsStroke === 'string' ? properties.endsStroke : (properties.backgroundColor || 'white'),\n                'stroke-width': 3\n                    }\n                });\n            }\n            \n            \n            \n            // Store the new value as the currentValue\n            this.currentValue = this.value;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draw the labels\n        //\n        this.drawLabels = function ()\n        {\n             // Draw the center label\n            if (properties.labelsCenter) {\n\n                var label = RGraph.SVG.numberFormat({\n                    object:    this,\n                    num:       this.value.toFixed(properties.labelsCenterDecimals),\n                    prepend:   properties.labelsCenterUnitsPre,\n                    append:    properties.labelsCenterUnitsPost,\n                    point:     properties.labelsCenterPoint,\n                    thousand:  properties.labelsCenterThousand,\n                    formatter: properties.labelsCenterFormatter\n                });\n\n\n\n\n\n                if (properties.labelsCenterSpecific) {\n                    properties.labelsCenterSpecific = RGraph.SVG.labelSubstitution({\n                        object:    this,\n                        text:      properties.labelsCenterSpecific,\n                        index:     0,\n                        value:     this.value,\n                        decimals:  properties.labelsCenterSpecificFormattedDecimals  || 0,\n                        unitsPre:  properties.labelsCenterSpecificFormattedUnitsPre  || '',\n                        unitsPost: properties.labelsCenterSpecificFormattedUnitsPost || '',\n                        thousand:  properties.labelsCenterSpecificFormattedThousand  || ',',\n                        point:     properties.labelsCenterSpecificFormattedPoint     || '.'\n                    });\n                }\n\n\n\n\n                // Get the text configuration\n                var textConf = RGraph.SVG.getTextConf({\n                    object: this,\n                    prefix: 'labelsCenter'\n                });\n\n                var text = RGraph.SVG.text({\n                    object: this,\n                    parent: this.svgAllGroup,\n                    tag:    'labels.center',\n                    \n                    text:   typeof properties.labelsCenterSpecific === 'string' ? properties.labelsCenterSpecific : label,\n                    \n                    x:      this.centerx + properties.labelsCenterOffsetx,\n                    y:      this.centery + properties.labelsCenterOffsety,\n                    \n                    valign: 'center',\n                    halign: 'center',\n\n                    font:   textConf.font,\n                    size:   textConf.size,\n                    bold:   textConf.bold,\n                    italic: textConf.italic,\n                    color:  textConf.color\n                });\n\n                // Store a reference to the center label\n                this.nodes.labelsCenter = text;\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for easy specification of gradients\n        //\n        this.parseColors = function ()\n        {\n            // Save the original colors so that they can be restored when the canvas is reset\n            if (!Object.keys(this.originalColors).length) {\n                this.originalColors = {\n                    colors:          RGraph.SVG.arrayClone(properties.colors, true),\n                    backgroundColor: RGraph.SVG.arrayClone(properties.backgroundColor, true)\n                }\n            }\n\n\n            // colors\n            var colors = properties.colors;\n\n            if (colors) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = RGraph.SVG.parseColorLinear({\n                        object: this,\n                         color: colors[i],\n                         start: this.centerx - this.radius,\n                           end: this.centerx + this.radius,\n                           direction: 'horizontal'\n                    });\n                }\n            }\n            \n            // Background color\n            properties.backgroundColor = RGraph.SVG.parseColorLinear({\n                object: this,\n                color: properties.backgroundColor,\n                start: properties.marginLeft,\n                  end: this.width - properties.marginRight,\n                  direction: 'horizontal'\n            });\n        };\n\n\n\n\n\n\n\n\n        //\n        // Using a function to add events makes it easier to facilitate method\n        // chaining\n        //\n        // @param string   type The type of even to add\n        // @param function func\n        //\n        this.on = function (type, func)\n        {\n            if (type.substr(0,2) !== 'on') {\n                type = 'on' + type;\n            }\n\n            RGraph.SVG.addCustomEventListener(this, type, func);\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Used in chaining. Runs a function there and then - not waiting for\n        // the events to fire (eg the onbeforedraw event)\n        //\n        // @param function func The function to execute\n        //\n        this.exec = function (func)\n        {\n            func(this);\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function returns the pertinent angle for a particular click (or other mouse event)\n        // \n        // @param obj e The event object\n        //                      OR\n        //        int e An integer value for\n        //              which to the relevant\n        //              angle\n        //\n        this.getAngle = function (e)\n        {\n            if (typeof e === 'number') {\n                var angle = ((e - this.min) / (this.max - this.min)) * RGraph.SVG.TRIG.TWOPI;\n                    angle -= RGraph.SVG.TRIG.HALFPI;\n\n            } else {\n                var mouseX = e.offsetX,\n                    mouseY = e.offsetY;\n    \n                var angle = RGraph.SVG.TRIG.getAngleByXY({\n                    cx: this.centerx,\n                    cy: this.centery,\n                    x:  mouseX,\n                    y:  mouseY\n                });\n                \n                angle -= RGraph.SVG.TRIG.HALFPI;\n            }\n    \n            return angle;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function returns the pertinent value for a particular click (or other mouse event)\n        // \n        // @param obj e The event object\n        //              \n        //\n        this.getValue = function (e)\n        {\n            // Treat the argument as an angle (given in radians)\n            if (typeof e === 'number') {\n                var angle = e;\n                \n            // Treat the argument as an event object\n            } else {\n                // Get the angle of the click\n                var angle = this.getAngle(e);\n            }\n\n            // Calculate the value based on the angle and min/max values\n            var value = (((angle + RGraph.SVG.TRIG.HALFPI) / RGraph.SVG.TRIG.TWOPI) * (this.max - this.min)) + this.min;\n\n            // Ensure that the value is in range\n            value = Math.max(value, this.min);\n            value = Math.min(value, this.max);\n\n            return value;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function returns the pertinent radius (from the centerx/y) of a given event object\n        // (eg from a click or mouse event).\n        // \n        // @param obj e The event object\n        //\n        this.getRadius = function (e)\n        {\n            var x = e.offsetX,\n                y = e.offsetY;\n\n            var radius = RGraph.SVG.TRIG.getHypLength({\n                x1: x,\n                y1: y,\n                x2: this.centerx,\n                y2: this.centery\n            });\n            \n            return radius;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Segmented donut Grow\n        // \n        // This effect gradually increases the represented value\n        // \n        // @param              An object of options - eg: {frames: 60}\n        // @param function     An optional callback function\n        //\n        this.grow = function ()\n        {\n            var obj = this;\n\n            this.currentValue = typeof this.currentValue === 'number' ? this.currentValue : this.min;\n\n            // Limit value to the max and min values\n            this.value = Math.min(this.value, this.max);\n            this.value = Math.max(this.value, this.min);\n\n            var opt      = arguments[0] || {},\n                frames   = opt.frames || 60,\n                frame    = 0,\n                diff     = this.value - this.currentValue,\n                step     = diff / frames,\n                callback = arguments[1] || function () {},\n                initial  = this.currentValue\n\n\n\n            function iterator ()\n            {\n                obj.value = initial + (frame++ * step);\n    \n                RGraph.SVG.redraw(obj.svg);\n\n                if (frame++ >= frames) {\n                    this.currentValue = this.value;\n                    callback(obj);\n                } else {\n                    RGraph.SVG.FX.update(iterator);\n                }\n            }\n            \n            iterator();\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function handles clipping to scale values. Because\n        // each chart handles scales differently, a worker function\n        // is needed instead of it all being done centrally in the\n        // RGraph.clipTo.start() function.\n        //\n        // @param string clip The clip string as supplied by the\n        //                    user in the chart configuration\n        //\n        this.clipToScaleWorker = function (clipPath)\n        {\n            // The Regular expression is actually done by the\n            // calling RGraph.clipTo.start() function  in the core\n            // library\n            if (RegExp.$1 === 'min') from = this.min; else from = Number(RegExp.$1);\n            if (RegExp.$2 === 'max') to   = this.max; else to   = Number(RegExp.$2);\n\n            var a1 = this.getAngle(from),\n                a2 = this.getAngle(to);\n\n            // Change the radius if the number is \"min\"\n            if (RegExp.$1 === 'min') {\n                a1 = this.getAngle(this.min);\n            }\n\n            // Change the radius if the number is \"max\"\n            if (RegExp.$2 === 'max') {\n                a2 = this.getAngle(this.max);\n            }\n\n    \n            var path = RGraph.SVG.TRIG.getArcPath3({\n                cx:     this.centerx,\n                cy:     this.centery,\n                radius: Math.max(this.width, this.height),\n                start:  a1 + RGraph.SVG.TRIG.HALFPI,\n                end:    a2 + RGraph.SVG.TRIG.HALFPI,\n                anticlockwise: false\n            });\n    \n\n            RGraph.SVG.create({\n                svg: this.svg,\n                parent: clipPath,\n                type: 'path',\n                attr: {\n                    d: 'M {1} {2} {3} z'.format(\n                        this.centerx,\n                        this.centery,\n                        path\n                    )\n                }\n            });\n            \n            // Now set the clip-path attribute on the\n            // all-elements group\n            this.svgAllGroup.setAttribute(\n                'clip-path',\n                'url(#' + clipPath.id + ')'\n            );\n        };\n\n\n\n\n\n\n\n\n        //\n        // Set the options that the user has provided\n        //\n        for (i in conf.options) {\n            if (typeof i === 'string') {\n                this.set(i, conf.options[i]);\n            }\n        }\n    \n    \n    \n        return this;\n    };\n\n\n\n\n\n\n\n\n// End module pattern\n})(window, document);"],"names":[],"version":3,"file":"index.dd20e26e.js.map","sourceRoot":"/__parcel_source_root/"}