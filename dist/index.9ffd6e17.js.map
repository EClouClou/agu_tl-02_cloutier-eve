{"mappings":"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","sources":["src/assets/js/RGraph.svg.pie.js"],"sourcesContent":["'version:2024-06-01 (6.18)';\n//\n    // o---------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:                |\n    // |                                                                                 |\n    // |                       https://www.rgraph.net/license.html                       |\n    // |                                                                                 |\n    // | RGraph is dual-licensed under the Open Source GPL license. That means that it's |\n    // | free to use and there are no restrictions on what you can use RGraph for!       |\n    // | If the GPL license does not suit you however, then there's an inexpensive       |\n    // | commercial license option available. See the URL above for more details.        |\n    // o---------------------------------------------------------------------------------o\n\n    RGraph     = window.RGraph || {isrgraph:true,isRGraph:true,rgraph:true};\n    RGraph.SVG = RGraph.SVG || {};\n\n// Module pattern\n(function (win, doc, undefined)\n{\n    RGraph.SVG.Pie = function (conf)\n    {\n        //\n        // A setter that the constructor uses (at the end)\n        // to set all of the properties\n        //\n        // @param string name  The name of the property to set\n        // @param string value The value to set the property to\n        //\n        this.set = function (name, value)\n        {\n            if (arguments.length === 1 && typeof name === 'object') {\n                for (i in arguments[0]) {\n                    if (typeof i === 'string') {\n                        \n                        name  = ret.name;\n                        value = ret.value;\n\n                        this.set(name, value);\n                    }\n                }\n            } else {\n\n\n                // Go through all of the properties and make sure\n                // that they're using the correct capitalisation\n                name = this.properties_lowercase_map[name.toLowerCase()] || name;\n\n                var ret = RGraph.SVG.commonSetter({\n                    object: this,\n                    name:   name,\n                    value:  value\n                });\n                \n                name  = ret.name;\n                value = ret.value;\n\n                this.properties[name] = value;\n\n                // If setting the colors, update the originalColors\n                // property too\n                if (name === 'colors') {\n                    this.originalColors = RGraph.SVG.arrayClone(value, true);\n                    this.colorsParsed = false;\n                }\n            }\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A getter.\n        // \n        // @param name  string The name of the property to get\n        //\n        this.get = function (name)\n        {\n            // Go through all of the properties and make sure\n            // that they're using the correct capitalisation\n            name = this.properties_lowercase_map[name.toLowerCase()] || name;\n\n            return this.properties[name];\n        };\n\n\n\n\n\n\n\n\n        // Convert strings to numbers\n        conf.data = RGraph.SVG.stringsToNumbers(conf.data);\n\n\n\n\n        this.type            = 'pie';\n        this.id              = conf.id;\n        this.uid             = RGraph.SVG.createUID();\n        this.container       = document.getElementById(this.id);\n        this.layers          = {}; // MUST be before the SVG tag is created!\n        this.svg             = RGraph.SVG.createSVG({object: this,container: this.container});\n        this.svgAllGroup     = RGraph.SVG.createAllGroup(this);\n        this.clipid          = null; // Used to clip the canvas\n        this.isRGraph        = true;\n        this.isrgraph        = true;\n        this.rgraph          = true;\n        this.width           = Number(this.svg.getAttribute('width'));\n        this.height          = Number(this.svg.getAttribute('height'));\n        this.data            = conf.data;\n        this.angles          = [];\n        this.colorsParsed    = false;\n        this.originalColors  = {};\n        this.gradientCounter = 1;\n        this.nodes           = [];\n        this.shadowNodes     = [];\n        this.firstDraw        = true; // After the first draw this will be false\n\n\n\n\n\n\n\n\n\n\n\n        // Add this object to the ObjectRegistry\n        RGraph.SVG.OR.add(this);\n        \n        // Set the DIV container to be inline-block\n        this.container.style.display = 'inline-block';\n\n        this.properties =\n        {\n            centerx: null,\n            centery: null,\n            radius:  null,\n            \n            marginLeft:    35,\n            marginRight:   35,\n            marginTop:     35,\n            marginBottom:  35,\n            \n            colors: [\n                '#F2BFAF', '#F8D57E', '#009379'\n            ],\n            colorsStroke:      'rgba(0,0,0,0)',\n            \n            textColor: 'black',\n            textFont: 'Poppins, Verdana, sans-serif',\n            textSize: 10,\n            textBold: false,\n            textItalic: false,\n            text:       null,\n            \n            labels: [],\n            labelsSticks: true,\n            labelsSticksOffset: 50,\n            labelsFormattedDecimals:  0,\n            labelsFormattedPoint:     '.',\n            labelsFormattedThousand:  ',',\n            labelsFormattedUnitsPre:  '',\n            labelsFormattedUnitsPost: '',\n\n            linewidth: 1,\n            \n            tooltips:                        null,\n            tooltipsOverride:                null,\n            tooltipsEffect:                  'fade',\n            tooltipsCssClass:                'RGraph_tooltip',\n            tooltipsCss:                     null,\n            tooltipsEvent:                   'click',\n            tooltipsFormattedThousand:       ',',\n            tooltipsFormattedPoint:          '.',\n            tooltipsFormattedDecimals:       0,\n            tooltipsFormattedUnitsPre:       '',\n            tooltipsFormattedUnitsPost:      '',\n            tooltipsFormattedKeyColors:      null,\n            tooltipsFormattedKeyColorsShape: 'square',\n            tooltipsFormattedKeyLabels:      [],\n            tooltipsFormattedTableHeaders:   null,\n            tooltipsFormattedTableData:      null,\n            tooltipsPointer:                 true,\n            tooltipsPointerOffsetx:          0,\n            tooltipsPointerOffsety:          0,\n            tooltipsPositionStatic:          true,\n\n            highlightStroke: 'rgba(0,0,0,0)',\n            highlightFill: 'rgba(255,255,255,0.7)',\n            highlightLinewidth: 1,\n            highlightStyle: 'normal',\n            highlightStyleOutlineWidth: 7,\n            \n            title:       '',\n            titleX:      null,\n            titleY:      null,\n            titleHalign: 'center',\n            titleValign: null,\n            titleSize:   null,\n            titleColor:  null,\n            titleFont:   null,\n            titleBold:   null,\n            titleItalic: null,\n            \n            titleSubtitle:       null,\n            titleSubtitleSize:   null,\n            titleSubtitleColor:  '#aaa',\n            titleSubtitleFont:   null,\n            titleSubtitleBold:   null,\n            titleSubtitleItalic: null,\n            \n            shadow: false,\n            shadowOffsetx: 2,\n            shadowOffsety: 2,\n            shadowBlur: 2,\n            shadowColor: 'rgba(0,0,0,.25)',\n            \n            exploded: 0,\n            roundRobinMultiplier: 1,\n            \n            donut:              false,\n            donutWidth:         75,\n\n            key:            null,\n            keyColors:      null,\n            keyOffsetx:     0,\n            keyOffsety:     0,\n            keyLabelsOffsetx: 0,\n            keyLabelsOffsety: -1,\n            keyLabelsColor:   null,\n            keyLabelsFont:    null,\n            keyLabelsSize:    null,\n            keyLabelsBold:    null,\n            keyLabelsItalic:  null,\n            \n            clip: null\n        };\n\n        //\n        // Add the reverse look-up table  for property names\n        // so that property names can be specified in any case.\n        //\n        this.properties_lowercase_map = [];\n        for (var i in this.properties) {\n            if (typeof i === 'string') {\n                this.properties_lowercase_map[i.toLowerCase()] = i;\n            }\n        }\n\n\n        //\n        // Copy the global object properties to this instance\n        //\n        RGraph.SVG.getGlobals(this);\n\n\n\n\n\n        //\n        // \"Decorate\" the object with the generic effects if the effects library has been included\n        //\n        if (RGraph.SVG.FX && typeof RGraph.SVG.FX.decorate === 'function') {\n            RGraph.SVG.FX.decorate(this);\n        }\n\n\n\n\n\n        // Add the responsive function to the object\n        this.responsive = RGraph.SVG.responsive;\n\n\n\n\n\n        var properties = this.properties;\n\n\n\n\n\n\n\n\n        //\n        // The draw method draws the Bar chart\n        //\n        this.draw = function ()\n        {\n            // Fire the beforedraw event\n            RGraph.SVG.fireCustomEvent(this, 'onbeforedraw');\n\n\n\n\n\n\n\n\n\n\n\n\n\n            //(Re)set this so it doesn't grow endlessly\n            this.angles = [];\n\n\n\n\n\n\n\n\n\n\n\n            // Should be the first(ish) thing that's done in the\n            // .draw() function except for the onbeforedraw event\n            // and the installation of clipping.\n            this.width  = Number(this.svg.getAttribute('width'));\n            this.height = Number(this.svg.getAttribute('height'));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            // Create the defs tag if necessary\n            RGraph.SVG.createDefs(this);\n\n\n            this.graphWidth  = this.width - properties.marginLeft - properties.marginRight;\n            this.graphHeight = this.height - properties.marginTop - properties.marginBottom;\n\n\n\n            // Work out the center point\n            this.centerx = (this.graphWidth / 2) + properties.marginLeft;\n            this.centery = (this.graphHeight / 2) + properties.marginTop;\n            this.radius  = Math.min(this.graphWidth, this.graphHeight) / 2;\n\n\n\n            // Allow the user to override the calculated centerx/y/radius\n            this.centerx = typeof properties.centerx === 'number' ? properties.centerx : this.centerx;\n            this.centery = typeof properties.centery === 'number' ? properties.centery : this.centery;\n            this.radius  = typeof properties.radius  === 'number' ? properties.radius  : this.radius;\n            \n            //\n            // Allow the centerx/centery/radius to be a plus/minus\n            //\n            if (typeof properties.radius === 'string' && properties.radius.match(/^\\+|-\\d+$/) )   this.radius  += parseFloat(properties.radius);\n            if (typeof properties.centerx === 'string' && properties.centerx.match(/^\\+|-\\d+$/) ) this.centerx += parseFloat(properties.centerx);\n            if (typeof properties.centery === 'string' && properties.centery.match(/^\\+|-\\d+$/) ) this.centery += parseFloat(properties.centery);\n\n\n            // Parse the colors for gradients\n            // Must be after the cx/cy/r calculations\n            RGraph.SVG.resetColorsToOriginalValues({object:this});\n            this.parseColors();\n\n\n            // Go through the data and work out the maximum value\n            this.max   = RGraph.SVG.arrayMax(this.data);\n            this.total = RGraph.SVG.arraySum(this.data);\n\n            // Set the explosion to be an array if it's a number\n            if (typeof properties.exploded === 'number' && properties.exploded > 0) {\n                var val = properties.exploded;\n    \n                properties.exploded = [];\n    \n                for (var i=0; i<this.data.length; ++i) {\n                    properties.exploded[i] = val;\n                }\n            }\n\n\n\n\n\n\n\n\n\n\n\n\n            // Install clipping if requested\n            if (this.properties.clip) {\n\n                this.clipid = RGraph.SVG.installClipping(this);\n\n                // Add the clip ID to the all group\n                this.svgAllGroup.setAttribute(\n                    'clip-path',\n                    'url(#{1})'.format(this.clipid)\n                );\n            } else {\n                // No clipping - so ensure that there's no clip-path\n                // attribute\n                this.clipid = null;\n                this.svgAllGroup.removeAttribute('clip-path');\n            }\n\n\n\n\n\n\n            // Draw the segments\n            this.drawSegments({shadow: true});\n\n\n\n            // Draw the title and subtitle\n            RGraph.SVG.drawTitle(this);\n\n\n\n            // Draw the labels\n\n            //\n            // If the xaxisLabels option is a string then turn it\n            // into an array.\n            //\n            if (properties.labels && properties.labels.length) {\n                if (typeof properties.labels === 'string') {\n                    properties.labels = RGraph.SVG.arrayPad({\n                        array:  [],\n                        length: this.data.length,\n                        value:  properties.labels\n                    });\n                }\n\n                // Label substitution\n                //\n                for (var i=0; i<properties.labels.length; ++i) {\n                    properties.labels[i] = RGraph.SVG.labelSubstitution({\n                        object:    this,\n                        text:      properties.labels[i],\n                        index:     i,\n                        value:     this.data[i],\n                        decimals:  properties.labelsFormattedDecimals  || 0,\n                        unitsPre:  properties.labelsFormattedUnitsPre  || '',\n                        unitsPost: properties.labelsFormattedUnitsPost || '',\n                        thousand:  properties.labelsFormattedThousand  || ',',\n                        point:     properties.labelsFormattedPoint     || '.'\n                    });\n                }\n            }\n\n            if (properties.labelsSticks) {\n                this.drawLabelsSticks();\n            } else {\n                this.drawLabels();\n            }\n            \n            \n            //\n            // Draw the ingraph labels if required\n            //\n            this.drawIngraphLabels();\n\n\n\n\n            // Draw the key\n            if (typeof properties.key !== null && RGraph.SVG.drawKey) {\n                RGraph.SVG.drawKey(this);\n            } else if (!RGraph.SVG.isNullish(properties.key)) {\n                alert('The drawKey() function does not exist - have you forgotten to include the key library?');\n            }\n\n            \n\n\n\n            // Add the event listener that clears the highlight if\n            // there is any. Must be MOUSEDOWN (ie before the click event)\n            var obj = this;\n            document.body.addEventListener('mousedown', function (e)\n            {\n                RGraph.SVG.removeHighlight(obj);\n            }, false);\n\n\n\n\n\n\n\n\n            //\n            // Allow the addition of custom text via the\n            // text: property.\n            //\n            RGraph.SVG.addCustomText(this);\n\n\n\n\n\n\n\n\n\n\n\n\n            //\n            // Fire the onfirstdraw event\n            //\n            if (this.firstDraw) {\n                this.firstDraw = false;\n                RGraph.SVG.fireCustomEvent(this, 'onfirstdraw');\n            }\n\n\n\n\n            // Fire the draw event\n            RGraph.SVG.fireCustomEvent(this, 'ondraw');\n\n\n\n\n\n\n\n            //\n            // Install any inline responsive configuration. This\n            // should be last in the draw function - even after\n            // the draw events.\n            //\n            RGraph.SVG.installInlineResponsive(this);\n\n\n\n\n\n\n\n\n\n\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // New create() shortcut function\n        // For example:\n        //    this.create('rect,x:0,y:0,width:100,height:100'[,parent]);\n        //\n        // @param str string The tag definition to parse and create\n        // @param     object The (optional) parent element\n        // @return    object The new tag\n        //\n        this.create = function (str)\n        {\n            var def = RGraph.SVG.create.parseStr(this, str);\n            def.svg = this.svg;\n            \n            // By default the parent is the SVG tag - but if\n            // requested then change it to the tag that has\n            // been given\n            if (arguments[1]) {\n                def.parent = arguments[1];\n            }\n\n            return RGraph.SVG.create(def);\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the segments\n        //\n        // @param bool     Whether or not this is a redraw. If this is a redraw\n        //                 shadows are omitted\n        //\n        this.drawSegments = function (opt)\n        {\n            var start   = 0,\n                end     = 0,\n                angle   = 0,\n                sum     = RGraph.SVG.arraySum(this.data),\n                segment = 0;\n\n\n\n\n            // Work out the start and end angles for the data\n            for (var i=0,len=this.data.length; i<len; ++i) {\n            \n                var value = this.data[i] * properties.roundRobinMultiplier;\n\n                start   = angle;\n                segment = ((value / sum) * RGraph.SVG.TRIG.TWOPI);\n                end     = start + segment;\n\n                var explosion = RGraph.SVG.TRIG.getRadiusEndPoint({\n                    angle: start + (segment / 2),\n                    r: properties.exploded[i]\n                });\n\n                var explosionX = explosion[1],\n                    explosionY = explosion[0];\n\n\n                this.angles[i] = {\n                    start:   start,\n                    end:     end,\n                    angle:   end - start,\n                    halfway: ((end - start) / 2) + start,\n                    cx:      this.centerx + (parseFloat(explosionX) || 0),\n                    cy:      this.centery - (parseFloat(explosionY) || 0),\n                    radius:  this.radius,\n                    object: this\n                };\n\n                // Increase the angle at which we start drawing the next segment at\n                angle += (end - start);\n            }\n\n\n\n            if (opt.shadow) {\n                RGraph.SVG.setShadow({\n                    object:  this,\n                    offsetx: properties.shadowOffsetx,\n                    offsety: properties.shadowOffsety,\n                    blur:    properties.shadowBlur,\n                    color:   properties.shadowColor,\n                    id:      'dropShadow'\n                });\n            }\n\n\n            //\n            // This loop goes thru the angles that were\n            // generated above and adds them to the\n            // scene\n            //\n            for (var i=0; i<this.angles.length; ++i) {\n\n                var path = RGraph.SVG.TRIG.getArcPath({\n                    cx:    this.angles[i].cx,\n                    cy:    this.angles[i].cy,\n                    r:     this.radius,\n                    start: this.angles[i].start,\n                    end:   this.angles[i].end\n                });\n\n\n\n\n\n                // Donut\n                if (properties.donut) {\n                \n                    var donutWidth = properties.donutWidth;\n                \n                    var donut_path = RGraph.SVG.TRIG.getArcPath3({\n                        cx:     this.angles[i].cx,\n                        cy:     this.angles[i].cy,\n                        r:      this.radius - donutWidth,\n                        start:  this.angles[i].end,\n                        end:    this.angles[i].start,\n                        moveto: false,\n                        anticlockwise: true\n                    });\n\n                    var xy = RGraph.SVG.TRIG.getRadiusEndPoint({\n                        angle: this.angles[i].end - RGraph.SVG.TRIG.HALFPI,\n                        r:     this.radius - donutWidth\n                    });\n                    \n                \n                \n                \n                    path =   path\n                           + \" L {1} {2} \".format(xy[0] + this.angles[i].cx, xy[1] + this.angles[i].cy)\n                           + donut_path\n                           + \" Z\";\n                \n                \n                } else {\n                \n                    path = path + \" L {1} {2} \".format(\n                        this.angles[i].cx,\n                        this.angles[i].cy\n                    ) + \" Z\"\n                }\n\n\n\n                var arc = RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svgAllGroup,\n                    type: 'path',\n                    attr: {\n                        d: path,\n                        fill: properties.colors[i],\n                        stroke: properties.colorsStroke,\n                        'stroke-width': properties.linewidth,\n                        'data-tooltip': (!RGraph.SVG.isNullish(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[i] : '',\n                        'data-index': i,\n                        'data-value': value,\n                        'data-start-angle': this.angles[i].start,\n                        'data-end-angle': this.angles[i].end,\n                        'data-radius': this.radius,\n                        filter: (properties.shadow && opt.shadow) ? 'url(#dropShadow)' : ''\n                    }\n                });\n\n                // Store the path with the relevant entry in the obj.angles array\n                this.angles[i].element = arc;\n                \n\n                // Store a reference to the node\n                if (properties.shadow && opt.shadow) {\n                    this.shadowNodes[i] = arc;\n                } else {\n                    this.nodes[i] = arc;\n                }\n\n                if (properties.tooltips && (properties.tooltips[i] || typeof properties.tooltips === 'string') && (!opt.shadow || !properties.shadow)) {\n                \n                    // Make the tooltipsEvent default to click\n                    if (properties.tooltipsEvent !== 'mousemove') {\n                        properties.tooltipsEvent = 'click';\n                    }\n\n                    (function (index, obj)\n                    {\n                        arc.addEventListener(properties.tooltipsEvent, function (e)\n                        {\n                            // If the event for tooltips is mousemove and the\n                            // tooltip is already visible then do nothing\n                            var tooltip = RGraph.SVG.REG.get('tooltip');\n                            if (tooltip && properties.tooltipsEvent === 'mousemove' && index === tooltip.__index__) {\n                                return;\n                            }\n\n\n\n\n\n                            obj.removeHighlight();\n\n                            // Show the tooltip\n                            RGraph.SVG.tooltip({\n                                object:          obj,\n                                index:           index,\n                                sequentialIndex: index,\n                                text:            typeof properties.tooltips === 'string' ? properties.tooltips : properties.tooltips[index],\n                                event:           e\n                            });\n                            \n                            // Highlight the rect that has been clicked on\n                            obj.highlight(e.target);\n                            \n                            var highlight = RGraph.SVG.REG.get('highlight');\n                            \n                            if (properties.tooltipsEvent === 'mousemove') {\n                                highlight.style.cursor = 'pointer';\n                            }\n                            \n                        }, false);\n\n                        // Install the event listener that changes the\n                        // cursor if necessary\n                        if (properties.tooltipsEvent === 'click') {\n                            arc.addEventListener('mousemove', function (e)\n                            {\n                                e.target.style.cursor = 'pointer';\n                            }, false);\n                        }\n                        \n                    }(i, this));\n                }\n            }\n\n            //\n            // Redraw the segments if necessary so that they're on\n            // top of any shadow\n            //\n            if (properties.shadow && opt.shadow) {\n                this.redrawSegments();\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Redraw the Bars o that the bars appear above any shadow\n        //\n        this.redrawSegments = function ()\n        {\n            this.drawSegments({shadow: false});\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draw the labels\n        //\n        this.drawLabels = function ()\n        {\n            var angles   = this.angles,\n                labels   = properties.labels,\n                textConf = RGraph.SVG.getTextConf({\n                    object: this,\n                    prefix: 'labels'\n                });\n\n            for (var i=0; i<angles.length; ++i) {\n                \n                var endpoint = RGraph.SVG.TRIG.getRadiusEndPoint({\n                    angle: angles[i].halfway - RGraph.SVG.TRIG.HALFPI,\n                    r: angles[i].radius + 15\n                });\n                \n                var x = endpoint[0] + angles[i].cx,\n                    y = endpoint[1] + angles[i].cy,\n                    valign,\n                    halign;\n\n                // Figure out the valign and halign based on the quadrant\n                // the center of the sgement is in.\n                if (angles[i].halfway > 0 && angles[i].halfway < RGraph.SVG.TRIG.HALFPI) {\n                    halign = 'left';\n                    valign = 'bottom';\n                } else if (angles[i].halfway > RGraph.SVG.TRIG.HALFPI && angles[i].halfway < RGraph.SVG.TRIG.PI) {\n                    halign = 'left';\n                    valign = 'top';\n                } else if (angles[i].halfway > RGraph.SVG.TRIG.PI && angles[i].halfway < (RGraph.SVG.TRIG.HALFPI + RGraph.SVG.TRIG.PI)) {\n                    halign = 'right';\n                    valign = 'top';\n                } else if (angles[i].halfway > (RGraph.SVG.TRIG.HALFPI + RGraph.SVG.TRIG.PI) && angles[i].halfway < RGraph.SVG.TRIG.TWOPI) {\n                    halign = 'right';\n                    valign = 'top';\n                }\n\n                RGraph.SVG.text({\n                    object: this,\n                    parent: this.svgAllGroup,\n                    tag:    'labels',\n                    \n                    text:   typeof labels[i] === 'string' ? labels[i] : '',\n                    \n                    x:      x,\n                    y:      y,\n                    \n                    valign: valign,\n                    halign: halign,\n                    \n                    font:   textConf.font,\n                    size:   textConf.size,\n                    bold:   textConf.bold,\n                    italic: textConf.italic,\n                    color:  textConf.color\n                });\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the ingraph labels\n        //\n        this.drawIngraphLabels = function ()\n        {\n            if (properties.labelsIngraph) {\n\n                var textConf = RGraph.SVG.getTextConf({\n                    object: this,\n                    prefix: 'labelsIngraph'\n                });\n\n                for (var i=0; i<this.angles.length; ++i) {\n    \n                    // Some defaults\n                    var halign   = properties.labelsIngraphHalign || 'center',\n                        valign   = properties.labelsIngraphValign || 'center',\n\n                        bgcolor  = properties.labelsIngraphBackground  || 'transparent',\n                        decimals = properties.labelsIngraphDecimals    || 0,\n                        padding  = typeof properties.labelsIngraphBackground === 'string' ? 3 : 0;\n\n                    // Work out the coordinates\n                    var xy = RGraph.SVG.TRIG.getRadiusEndPoint({\n                        angle: this.angles[i].halfway - RGraph.SVG.TRIG.HALFPI,\n                            r: this.angles[i].radius * (typeof properties.labelsIngraphRadiusPos === 'number' ? properties.labelsIngraphRadiusPos : 0.5)\n                    });\n                    \n                    if (typeof properties.labelsIngraphSpecific === 'object' && properties.labelsIngraphSpecific) {\n                        if (typeof properties.labelsIngraphSpecific[i] === 'string') {\n                            var str = properties.labelsIngraphSpecific[i];\n                        } else {\n                            var str = '';\n                        }\n                    } else {\n                        if (typeof properties.labelsIngraphFormatter === 'function') {\n                            var str = properties.labelsIngraphFormatter({\n                                object: this,\n                                number: this.data[i].toFixed(decimals)\n                            })\n                        } else {\n\n                            var str = RGraph.SVG.numberFormat({\n                                prepend:  properties.labelsIngraphUnitsPre,\n                                append:   properties.labelsIngraphUnitsPost,\n                                point:    properties.labelsIngraphPoint,\n                                thousand: properties.labelsIngraphThousand,\n                                num:      this.data[i].toFixed(decimals),\n                                object: this\n                            });\n                        }\n                    }\n    \n                    // Draw the text\n                    RGraph.SVG.text({\n                        object:     this,\n                        parent:     this.svgAllGroup,\n                        tag:        'labels.ingraph',\n                        x:          this.angles[i].cx + xy[0],\n                        y:          this.angles[i].cy + xy[1],\n                        text:       str,\n                        halign:     halign,\n                        valign:     valign,\n                        \n                        font:   textConf.font,\n                        size:   textConf.size,\n                        bold:   textConf.bold,\n                        italic: textConf.italic,\n                        color:  textConf.color,\n\n                        background: bgcolor,\n                        padding:    padding\n                    });\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function draws the labels in a list format\n        //\n        this.drawLabelsSticks = function ()\n        {\n            var labels_right  = [],\n                labels_left   = [],\n                labels_coords = [];\n\n            for (var i=0; i<this.angles.length; ++i) {\n\n                var angle          = (this.angles[i].start + ((this.angles[i].end - this.angles[i].start) / 2)) - RGraph.SVG.TRIG.HALFPI, // Midpoint\n                    \n                    endpoint_inner = RGraph.SVG.TRIG.getRadiusEndPoint({angle: angle, r: this.radius + 5}),\n                    endpoint_outer = RGraph.SVG.TRIG.getRadiusEndPoint({angle: angle, r: this.radius + 30}),\n                    \n                    explosion = [\n                        (typeof properties.exploded === 'number' ? properties.exploded : properties.exploded[i]),\n                        Math.cos(angle) * (typeof properties.exploded === 'number' ? properties.exploded : properties.exploded[i]),\n                        Math.sin(angle) * (typeof properties.exploded === 'number' ? properties.exploded : properties.exploded[i])\n                    ];\n                \n                // Initialise this array\n                labels_coords[i] = [];\n                \n                // Initialise this\n                var labels = {};\n\n\n\n\n\n                // Push the label into the correct array\n                if (angle > RGraph.SVG.TRIG.HALFPI) {\n                \n                    var index = labels_left.length;\n\n                    labels_left[index]        = [];\n                    labels_left[index].text   = properties.labels[i];\n                    labels_left[index].halign = 'right';\n                    labels                    = labels_left;\n\n                    labels_coords[i].halign = 'right';\n                } else {\n                    \n                    var index = labels_right.length; \n\n                    labels_right[index]        = [];\n                    labels_right[index].text   = properties.labels[i];\n                    labels_right[index].halign = 'right';\n                    labels                     = labels_right;\n\n                    labels_coords[i].halign = 'left';\n                }\n\n\n\n\n\n\n\n                endpoint_inner[0] += (explosion[1] || 0);\n                endpoint_inner[1] += (explosion[2] || 0);\n                \n                endpoint_outer[0] += (explosion[1] || 0);\n                endpoint_outer[1] += (explosion[2] || 0);\n            \n                var x,y;\n\n                if (labels[index].text) {\n                    var stick = RGraph.SVG.create({\n                        svg: this.svg,\n                        parent: this.svgAllGroup,\n                        type: 'path',\n                        attr: {\n                            d: 'M {1} {2} L {3} {4}'.format(\n                                this.centerx + endpoint_inner[0],\n                                this.centery + endpoint_inner[1],\n                                this.centerx + endpoint_outer[0],\n                                this.centery + endpoint_outer[1]\n                            ),\n                            stroke: '#999',\n                            fill: 'rgba(0,0,0,0)'\n                        }\n                    });\n                }\n                \n                // The path is altered later so this needs saving\n                if (stick) {\n                    labels[index].stick = stick;\n                }\n                \n                x = (this.centerx + endpoint_outer[0] + (angle > 1.57 ? -50 : 50));\n                y = (this.centery + endpoint_outer[1]);\n\n\n                labels_coords[i].x      = x ;\n                labels_coords[i].y      = y;\n                labels_coords[i].text = properties.labels[i];\n            }\n\n            // Calculate the spacing for each side\n            var vspace_right = (this.height - properties.marginTop - properties.marginBottom) / labels_right.length;\n            var vspace_left  = (this.height - properties.marginTop - properties.marginBottom) / labels_left.length;\n\n            // Reset these\n            x = y = 0;\n\n\n\n            // Get the text configuration\n            var textConf = RGraph.SVG.getTextConf({\n                object: this,\n                prefix: 'labels'\n            });\n\n            // Loop through the RHS labels\n            for (var i=0; i<labels_right.length; ++i) {\n                if (labels_right[i] && labels_right[i].text) {\n\n                    x = this.centerx + this.radius + properties.labelsSticksOffset;\n                    y = properties.marginTop + (vspace_right * i) + (vspace_right / 2);\n\n\n                    // Add the label to the scene\n                    RGraph.SVG.text({\n                        \n                        object: this,\n                        parent: this.svgAllGroup,\n                        tag:    'labels.sticks',\n                        \n                        text:   typeof labels_right[i].text === 'string' ? labels_right[i].text : '',\n                        \n                        x:      x,\n                        y:      y,\n                        \n                        valign: 'center',\n                        halign: labels_right[i].text,\n                        \n                        font:   textConf.font,\n                        size:   textConf.size,\n                        bold:   textConf.bold,\n                        italic: textConf.italic,\n                        color:  textConf.color\n                    });\n                    \n                    // Now update the path of the stick\n                    var str = labels_right[i].stick.getAttribute('d').replace(/ L /, ' Q ') + ' {1} {2}';\n\n                    labels_right[i].stick.setAttribute(\n                        'd',\n                        str.format(\n                            x - 5,\n                            y\n                        )\n                    );\n                }\n            }\n\n\n\n\n\n            // Loop through the LHS labels\n            for (var i=0; i<labels_left.length; ++i) {\n                if (labels_left[i] && labels_left[i].text) {\n\n                    x = this.centerx - this.radius - properties.labelsSticksOffset;\n                    y = this.height - (properties.marginTop + (vspace_left * i) + (vspace_left / 2));\n\n                \n                    // Add the label to the scene\n                    RGraph.SVG.text({\n                        \n                        object: this,\n                        parent: this.svgAllGroup,\n                        tag:    'labels.sticks',\n                        \n                        text:   typeof labels_left[i].text === 'string' ? labels_left[i].text : '',\n                        \n                        x:      x - 7,\n                        y:      y,\n                        \n                        valign: 'center',\n                        halign: labels_left[i].halign,\n                        \n                        font:   textConf.font,\n                        size:   textConf.size,\n                        bold:   textConf.bold,\n                        italic: textConf.italic,\n                        color:  textConf.color\n                    });\n                    \n                    // Now update the path of the stick\n                    var str = labels_left[i].stick.getAttribute('d').replace(/ L /, ' Q ') + ' {1} {2}';\n\n                    labels_left[i].stick.setAttribute(\n                        'd',\n                        str.format(\n                            x - 5,\n                            y\n                        )\n                    );\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function can be used to highlight a segment on the chart\n        // \n        // @param object segment The segment to highlight\n        //\n        this.highlight = function (segment)\n        {\n            // Outline style highlighting\n            if (properties.highlightStyle === 'outline') {\n                \n                var index = segment.getAttribute('data-index');\n            \n                var path = RGraph.SVG.TRIG.getArcPath3({\n                    start:          this.angles[index].start,\n                    end:            this.angles[index].end,\n                    cx:             this.angles[index].cx,\n                    cy:             this.angles[index].cy,\n                    r:              this.angles[index].radius + 2,\n                    anticlockwise:  false,\n                    lineto:         false\n                });\n            \n                // Add the reverse arc\n                path += RGraph.SVG.TRIG.getArcPath3({\n                    start:          this.angles[index].end,\n                    end:            this.angles[index].start,\n                    cx:             this.angles[index].cx,\n                    cy:             this.angles[index].cy,\n                    r:              this.angles[index].radius + 2 + properties.highlightStyleOutlineWidth,\n                    anticlockwise:  true\n                });\n            \n                var highlight = RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svgAllGroup,\n                    type: 'path',\n                    attr: {\n                        d: path,\n                        fill: properties.colors[index],\n                        stroke: 'transparent'\n                    },\n                    style: {\n                        pointerEvents: 'none'\n                    }\n                });\n            \n            // Regular highlighting\n            } else {\n            \n                var highlight = RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svgAllGroup,\n                    type: 'path',\n                    attr: {\n                        d: segment.getAttribute('d'),\n                        fill: properties.highlightFill,\n                        stroke: properties.highlightStroke,\n                        'stroke-width': properties.highlightLinewidth\n                    },\n                    style: {\n                        pointerEvents: 'none'\n                    }\n                });\n            }\n\n            if (properties.tooltipsEvent === 'mousemove') {\n                highlight.addEventListener('mouseout', function (e)\n                {\n                    highlight.parentNode.removeChild(highlight);\n                    RGraph.SVG.hideTooltip();\n\n                    RGraph.SVG.REG.set('highlight', null);\n                }, false);\n            }\n\n\n            // Store the highlight rect in the registry so\n            // it can be cleared later\n            RGraph.SVG.REG.set('highlight', highlight);\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for easy specification of gradients\n        //\n        this.parseColors = function () \n        {\n            // Save the original colors so that they can be restored when the canvas is reset\n            if (!Object.keys(this.originalColors).length) {\n                this.originalColors = {\n                    colors:        RGraph.SVG.arrayClone(properties.colors, true),\n                    highlightFill: RGraph.SVG.arrayClone(properties.highlightFill, true)\n                }\n            }\n            \n            \n            // colors\n            var colors = properties.colors;\n\n            if (colors) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = RGraph.SVG.parseColorRadial({\n                        object: this,\n                        color: colors[i]\n                    });\n                }\n            }\n            \n            // Highlight fill\n            properties.highlightFill = RGraph.SVG.parseColorRadial({\n                object: this,\n                color: properties.highlightFill\n            });\n        };\n\n\n\n\n\n\n\n\n        //\n        // A roundRobin effect for the Pie chart\n        //\n        // @param object    Options for the effect\n        // @param function  An optional callback function to call when\n        //                  the effect is complete\n        //\n        this.roundrobin =\n        this.roundRobin = function ()\n        {\n            var obj          = this,\n                opt          = arguments[0] || {},\n                data         = RGraph.SVG.arrayClone(this.data, true),\n                frame        = 1,\n                frames       = opt.frames || 30,\n                callback     = typeof opt.callback === 'function' ? opt.callback : function () {},\n                dataSum      = RGraph.SVG.arraySum(this.data),\n                textColor    = properties.textColor,\n                ingraph      = properties.labelsIngraph,\n                multiplier   = 0;\n\n            \n            // Set the text colors to transparent\n            properties.textColor     = 'rgba(0,0,0,0)';\n            properties.labelsIngraph = false;\n\n\n            // Draw the chart first\n            obj.draw();\n            \n            // Now get the resulting angles\n            var angles = RGraph.SVG.arrayClone(this.angles, true);\n\n            function iterator ()\n            {\n                multiplier =  (1 / frames) * frame++;\n\n                for (var i=0; i<angles.length; ++i) {\n\n                    var value = obj.data[i];\n\n                    obj.angles[i].start = angles[i].start * multiplier;\n                    obj.angles[i].end   = angles[i].end   * multiplier;\n\n                    //var segment = (((value * properties.roundRobinMultiplier) / dataSum) * RGraph.SVG.TRIG.TWOPI);\n                    var segment = ((obj.angles[i].end - obj.angles[i].start) / 2),\n                        explodedX = Math.cos(obj.angles[i].start + segment - RGraph.SVG.TRIG.HALFPI) * (properties.exploded[i] || 0),\n                        explodedY = Math.sin(obj.angles[i].start + segment - RGraph.SVG.TRIG.HALFPI) * (properties.exploded[i] || 0);\n\n\n\n                    var path = RGraph.SVG.TRIG.getArcPath({\n                        cx:    obj.centerx + explodedX,\n                        cy:    obj.centery + explodedY,\n                        r:     obj.radius,\n                        start: obj.angles[i].start,\n                        end:   obj.angles[i].end\n                    });\n\n\n\n\n\n                    // Donut\n                    if (properties.donut) {\n                    \n                        var donutWidth = properties.donutWidth;\n                    \n                        var donut_path = RGraph.SVG.TRIG.getArcPath3({ \n                            cx:     obj.angles[i].cx,\n                            cy:     obj.angles[i].cy,\n                            r:      obj.radius - donutWidth,\n                            start:  obj.angles[i].end,\n                            end:    obj.angles[i].start,\n                            moveto: false,\n                            anticlockwise: true\n                        });\n                        \n                        var xy = RGraph.SVG.TRIG.getRadiusEndPoint({\n                            angle: obj.angles[i].end - RGraph.SVG.TRIG.HALFPI,\n                            r:     obj.radius - donutWidth\n                        });\n                    \n                        path =   path\n                               + \" L {1} {2} \".format(xy[0] + obj.angles[i].cx, xy[1] + obj.angles[i].cy)\n                               + donut_path\n                               + \" Z\";\n                    \n                    } else {\n                    \n                        path = path + \" L {1} {2} \".format(\n                            obj.angles[i].cx,\n                            obj.angles[i].cy\n                        ) + \" Z\"\n                    }\n\n\n\n\n\n\n\n\n\n                    path = path + \" L {1} {2} Z\".format(\n                        obj.centerx + explodedX,\n                        obj.centery + explodedY\n                    );\n\n                    if (obj.shadowNodes && obj.shadowNodes[i]) {\n                        obj.shadowNodes[i].setAttribute('d', path);\n                    }\n                    obj.nodes[i].setAttribute('d', path);\n                }\n\n\n                if (frame <= frames) {\n                    RGraph.SVG.FX.update(iterator);\n                } else {\n                    properties.textColor     = textColor;\n                    properties.labelsIngraph = ingraph;\n\n                    RGraph.SVG.redraw(obj.svg);\n\n                    callback(obj);\n                }\n            }\n            \n            iterator();\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Using a function to add events makes it easier to facilitate method\n        // chaining\n        // \n        // @param string   type The type of even to add\n        // @param function func \n        //\n        this.on = function (type, func)\n        {\n            if (type.substr(0,2) !== 'on') {\n                type = 'on' + type;\n            }\n            \n            RGraph.SVG.addCustomEventListener(this, type, func);\n    \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Used in chaining. Runs a function there and then - not waiting for\n        // the events to fire (eg the onbeforedraw event)\n        // \n        // @param function func The function to execute\n        //\n        this.exec = function (func)\n        {\n            func(this);\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Remove highlight from the chart (tooltips)\n        //\n        this.removeHighlight = function ()\n        {\n            //var highlight = RGraph.SVG.REG.get('highlight');\n            //if (highlight && highlight.parentNode) {\n            //    highlight.parentNode.removeChild(highlight);\n            //}\n            \n            //RGraph.SVG.REG.set('highlight', null);\n            \n            RGraph.SVG.removeHighlight();\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that handles Bar chart specific tooltip substitutions\n        //\n        this.tooltipSubstitutions = function (opt)\n        {\n            return {\n                  index: opt.index,\n                dataset: 0,\n        sequentialIndex: opt.index,\n                  value: this.data[opt.index],\n                 values: [this.data[opt.index]]\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that returns the correct color/label/value\n        //\n        // @param object specific The indexes that are applicable\n        // @param number index    The appropriate index\n        //\n        this.tooltipsFormattedCustom = function (specific, index, colors)\n        {\n            var color = colors[specific.index];\n            var label = ( (typeof properties.tooltipsFormattedKeyLabels === 'object' && typeof properties.tooltipsFormattedKeyLabels[specific.index] === 'string') ? properties.tooltipsFormattedKeyLabels[specific.index] : '');\n\n            return {\n                label: label,\n                color: color\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for static tooltip positioning\n        //\n        this.positionTooltipStatic = function (args)\n        {\n            var obj        = args.object,\n                e          = args.event,\n                tooltip    = args.tooltip,\n                index      = args.index,\n                svgXY      = RGraph.SVG.getSVGXY(obj.svg),\n                segment    = this.angles[args.index],\n                angle      = segment.halfway,\n                multiplier = 0.5;\n\n//\n            // Determine the correct radius to use when calculating the\n            // coordinates of the tooltip\n            //\n            if (properties.donut) {\n                // Determine the radius\n                var radius = (this.radius - properties.donutWidth) + (properties.donutWidth / 2);\n            \n            } else {\n              var radius = this.radius * multiplier;\n            }\n            \n            // Account for any explosion\n            if (properties.exploded[index]) {\n                radius += properties.exploded[index];\n            }\n\n            var endpoint = RGraph.SVG.TRIG.getRadiusEndPoint({\n                angle: angle - RGraph.SVG.TRIG.HALFPI,\n                    r: radius\n            });\n\n            // Position the tooltip in the X direction\n            args.tooltip.style.left = (\n                  svgXY[0]                  // The X coordinate of the canvas\n                  + this.centerx            // The center X coord\n                  + endpoint[0]             // The endpoint X coordinate\n                - (tooltip.offsetWidth / 2) // Subtract half of the tooltip width\n            ) + 'px';\n\n            args.tooltip.style.top  = (\n                  svgXY[1]             // The Y coordinate of the canvas\n                  + this.centery       // The center Y coord\n                  + endpoint[1]        // The endpoint Y coordinate\n                - tooltip.offsetHeight // The height of the tooltip\n                - 10                   // An arbitrary amount\n            ) + 'px';\n        };\n\n\n\n\n\n\n\n\n        //\n        // Set the options that the user has provided\n        //\n        for (i in conf.options) {\n            if (typeof i === 'string') {\n                this.set(i, conf.options[i]);\n            }\n        }\n    };\n\n\n\n\n\n\n\n\n    return this;\n\n\n\n\n\n\n\n\n// End module pattern\n})(window, document);"],"names":[],"version":3,"file":"index.9ffd6e17.js.map","sourceRoot":"/__parcel_source_root/"}