{"mappings":"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","sources":["src/assets/js/RGraph.horseshoe.js"],"sourcesContent":["\n\n'version:2024-03-10 (6.17)';\n//\n    // o---------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:                |\n    // |                                                                                 |\n    // |                       https://www.rgraph.net/license.html                       |\n    // |                                                                                 |\n    // | RGraph is dual-licensed under the Open Source GPL license. That means that it's |\n    // | free to use and there are no restrictions on what you can use RGraph for!       |\n    // | If the GPL license does not suit you however, then there's an inexpensive       |\n    // | commercial license option available. See the URL above for more details.        |\n    // o---------------------------------------------------------------------------------o\n\n    RGraph = window.RGraph || {isrgraph:true,isRGraph:true,rgraph:true};\n\n    //\n    // The bar chart constructor\n    //\n    RGraph.Horseshoe = function (conf)\n    {\n        var id                 = conf.id\n        var canvas             = document.getElementById(id);\n        var min                = conf.min;\n        var max                = conf.max;\n        var value              = conf.value;\n\n        // id, min, max, value\n        // Get the canvas and context objects\n        this.id                     = id;\n        this.canvas                 = canvas;\n        this.context                = this.canvas.getContext ? this.canvas.getContext(\"2d\", {alpha: (typeof id === 'object' && id.alpha === false) ? false : true}) : null;\n        this.canvas.__object__      = this;\n        this.type                   = 'horseshoe';\n        this.min                    = RGraph.stringsToNumbers(min);\n        this.max                    = RGraph.stringsToNumbers(max);\n        this.value                  = RGraph.stringsToNumbers(value);\n        this.centerx                = null;\n        this.centery                = null;\n        this.radius                 = null;\n        this.isRGraph               = true;\n        this.isrgraph               = true;\n        this.rgraph                 = true;\n        this.currentValue           = null;\n        this.uid                    = RGraph.createUID();\n        this.canvas.uid             = this.canvas.uid ? this.canvas.uid : RGraph.createUID();\n        this.colorsParsed           = false;\n        this.coordsText             = [];\n        this.original_colors        = [];\n        this.firstDraw              = true; // After the first draw this will be false\n        this.stopAnimationRequested = false;// Used to control the animations\n        \n        //\n        // If the value is zero set it to very\n        // slightly more than zero so the meter\n        // is drawn correctly.\n        //\n        // Likewise with the maximum value\n        //\n        if (this.value <= 0.0000001) {\n            this.value = 0.0000001;\n        }\n        \n\n\n        // Various config type stuff\n        this.properties =\n        {\n            radius:                             null,\n            centerx:                            null,\n            centery:                            null,\n            width:                              10,\n\n            marginLeft:                            15,\n            marginRight:                           15,\n            marginTop:                             15,\n            marginBottom:                          15,\n\n            backgroundColor:                       null,\n            colors:                                ['#2D2D2D','#F2BFAF'],\n            \n            textFont:                              'Poppins, sans-serif',\n            textSize:                              15,\n            textColor:                             '#2D2D2D',\n            textBold:                              false,\n            textItalic:                            false,\n            textAccessible:                        false,\n            textAccessibleOverflow:                'visible',\n            textAccessiblePointerevents:           false,\n            text:                                  null,\n\n            labelsCenter:                              true,\n            labelsCenterFont:                          null,\n            labelsCenterSize:                          null,\n            labelsCenterColor:                         null,\n            labelsCenterBold:                          null,\n            labelsCenterItalic:                        null,\n            labelsCenterUnitsPre:                      '',\n            labelsCenterUnitsPost:                     '',\n            labelsCenterDecimals:                      0,\n            labelsCenterPoint:                         '.',\n            labelsCenterThousand:                      ',',\n            labelsCenterSpecific:                      '',\n            labelsCenterSpecificFormattedDecimals:     0,\n            labelsCenterSpecificFormattedPoint:        '.',\n            labelsCenterSpecificFormattedThousand:     ',',\n            labelsCenterSpecificFormattedUnitsPre:     '',\n            labelsCenterSpecificFormattedUnitsPost:    '',\n            labelsCenterOffsetx:                       0,\n            labelsCenterOffsety:                       0,\n            \n            endsRadius:                         null,\n            endsColor:                          null,\n\n            contextmenu:                        null,\n\n            annotatable:                           false,\n            annotatableColor:                      'black',\n\n            adjustable:                           false,\n\n            clearto:                               'rgba(0,0,0,0)'\n        }\n\n        //\n        // Add the reverse look-up table  for property names\n        // so that property names can be specified in any case.\n        //\n        this.properties_lowercase_map = [];\n        for (var i in this.properties) {\n            if (typeof i === 'string') {\n                this.properties_lowercase_map[i.toLowerCase()] = i;\n            }\n        }\n\n\n        // Check for support\n        if (!this.canvas) {\n            alert('[HORSESHOE] No canvas support');\n            return;\n        }\n\n\n\n\n        // Easy access to  properties and the path function\n        var properties = this.properties;\n        this.path      = RGraph.pathObjectFunction;\n        \n        \n        \n        //\n        // \"Decorate\" the object with the generic effects if the effects library has been included\n        //\n        if (RGraph.Effects && typeof RGraph.Effects.decorate === 'function') {\n            RGraph.Effects.decorate(this);\n        }\n        \n        \n        \n        // Add the responsive method. This method resides in the common file.\n        this.responsive = RGraph.responsive;\n\n\n        //\n        // A setter\n        //\n        this.set = function (name)\n        {\n            var value = typeof arguments[1] === 'undefined' ? null : arguments[1];\n\n            // Go through all of the properties and make sure\n            // that they're using the correct capitalisation\n            if (typeof name === 'string') {\n                name = this.properties_lowercase_map[name.toLowerCase()] || name;\n            }\n\n            // Set the colorsParsed flag to false if the colors\n            // property is being set\n            if (   name === 'colors'\n                || name === 'backgroundColor'\n               ) {\n                this.colorsParsed = false;\n            }\n            // the number of arguments is only one and it's an\n            // object - parse it for configuration data and return.\n            if (arguments.length === 1 && typeof arguments[0] === 'object') {\n                for (i in arguments[0]) {\n                    if (typeof i === 'string') {\n                        this.set(i, arguments[0][i]);\n                    }\n                }\n\n                return this;\n            }\n\n            properties[name] = value;\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A getter\n        // \n        // @param name  string The name of the property to get\n        //\n        this.get = function (name)\n        {\n            // Go through all of the properties and make sure\n            // that they're using the correct capitalisation\n            name = this.properties_lowercase_map[name.toLowerCase()] || name;\n\n            return properties[name];\n        };\n\n\n\n\n\n\n\n\n        //\n        // The function you call to draw the bar chart\n        //\n        this.draw = function ()\n        {\n            //\n            // Fire the onbeforedraw event\n            //\n            RGraph.fireCustomEvent(this, 'onbeforedraw');\n\n\n\n            // Translate half a pixel for antialiasing purposes - but only if it hasn't been\n            // done already\n            //\n            // MUST be the first thing done!\n            //\n            if (!this.canvas.__rgraph_aa_translated__) {\n                this.context.translate(0.5,0.5);\n            \n                this.canvas.__rgraph_aa_translated__ = true;\n            }\n\n\n            //\n            // Constrain the value to be within the min and max\n            //\n            if (this.value > this.max) this.value = this.max;\n            if (this.value < this.min) this.value = this.min;\n    \n            //\n            // Set the current value\n            //\n            this.currentValue = this.value;\n\n\n\n            //\n            // Make the margins easy to access\n            //\n            this.marginLeft   = properties.marginLeft;\n            this.marginRight  = properties.marginRight;\n            this.marginTop    = properties.marginTop;\n            this.marginBottom = properties.marginBottom;\n            \n            this.centerx = ((this.canvas.width - this.marginLeft - this.marginRight) / 2) + this.marginLeft;\n            this.centery = ((this.canvas.height - this.marginBottom - this.marginTop) / 2) + this.marginTop;\n            this.radius  = Math.min(\n                (this.canvas.width - this.marginLeft - this.marginRight) / 2,\n                (this.canvas.height - this.marginTop - this.marginBottom) / 2\n            );\n                \n            //\n            // Stop this growing uncontrollably\n            //\n            this.coordsText = [];\n    \n    \n    \n            //\n            // Custom centerx, centery and radius\n            //\n            if (typeof properties.centerx === 'number') this.centerx = properties.centerx;\n            if (typeof properties.centery === 'number') this.centery = properties.centery;\n            if (typeof properties.radius  === 'number') this.radius  = properties.radius;\n    \n            //\n            // Allow the centerx/centery/radius to be a plus/minus\n            //\n            if (typeof properties.radius  === 'string' && properties.radius.match(/^\\+|-\\d+$/) )  this.radius  += parseFloat(properties.radius);\n            if (typeof properties.centerx === 'string' && properties.centerx.match(/^\\+|-\\d+$/) ) this.centerx += parseFloat(properties.centerx);\n            if (typeof properties.centery === 'string' && properties.centery.match(/^\\+|-\\d+$/) ) this.centery += parseFloat(properties.centery);\n\n\n\n            //\n            // Parse the colors for gradients. Its down here so that the center X/Y can be used\n            //\n            if (!this.colorsParsed) {\n    \n                this.parseColors();\n    \n                // Don't want to do this again\n                this.colorsParsed = true;\n            }\n\n\n\n\n\n            //\n            // Install clipping\n            //\n            if (!RGraph.isNull(this.properties.clip)) {\n                RGraph.clipTo.start(this, this.properties.clip);\n            }\n    \n\n\n\n\n\n            //\n            // Draw the meter and its labels\n            //\n            this.drawMeter();\n            this.drawLabels();\n\n            //\n            // Setup the context menu if required\n            //\n            if (properties.contextmenu) {\n                RGraph.showContext(this);\n            }\n\n\n\n\n            //\n            // Add custom text thats specified\n            //\n            RGraph.addCustomText(this);\n\n\n\n\n    \n    \n\n\n            //\n            // This installs the event listeners\n            //\n            RGraph.installEventListeners(this);\n            \n            //\n            // End clipping\n            //\n            if (!RGraph.isNull(this.properties.clip)) {\n                RGraph.clipTo.end();\n            }\n\n\n\n            //\n            // Fire the onfirstdraw event\n            //\n            if (this.firstDraw) {\n                this.firstDraw = false;\n                RGraph.fireCustomEvent(this, 'onfirstdraw');\n                this.firstDrawFunc();\n            }\n\n\n\n\n            //\n            // Fire the RGraph draw event\n            //\n            RGraph.fireCustomEvent(this, 'ondraw');\n\n\n\n\n\n\n\n\n            //\n            // Install any inline responsive configuration. This\n            // should be last in the draw function - even after\n            // the draw events.\n            //\n            RGraph.installInlineResponsive(this);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Used in chaining. Runs a function there and then - not waiting for\n        // the events to fire (eg the onbeforedraw event)\n        // \n        // @param function func The function to execute\n        //\n        this.exec = function (func)\n        {\n            func(this);\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the meter\n        //\n        this.drawMeter = function ()\n        {\n            var angle = this.getAngle(this.currentValue);\n\n\n\n\n\n            // First thing to do is clear the canvas to the backgroundColor\n            if (properties.backgroundColor) {\n                this.path(\n                    'fs % fr -5 -5 % %',\n                    properties.backgroundColor,\n                    this.canvas.width + 10,\n                    this.canvas.height + 10\n                );\n            }\n\n\n\n\n            // Draw the gray background circle\n            this.path(\n                'b a % % % 0 6.29 false a % % % 6.29 0 true f %',\n                \n                this.centerx,\n                this.centery,\n                this.radius,\n                \n                this.centerx,\n                this.centery,\n                this.radius - properties.width,\n                \n                properties.colors[1]\n            );\n\n\n\n\n            // Draw the black indicator line\n            this.path(\n                \n                'b a % % % % % false a % % % % % true f %',\n                \n                this.centerx,\n                this.centery,\n                this.radius,\n                RGraph.TWOPI - RGraph.HALFPI,\n                angle,\n\n                this.centerx,\n                this.centery,\n                this.radius - properties.width,\n                angle,\n                RGraph.TWOPI - RGraph.HALFPI,\n                \n                properties.colors[0]\n            );\n\n\n\n\n            // Draw the bulb at the START of the indicator line\n            this.path(\n                'b lw 3 a % % % 0 % false f % s white',\n                this.centerx,\n                this.centery - this.radius + (properties.width / 2),\n                typeof properties.endsRadius === 'number' ? properties.endsRadius : (properties.width * 1.5),\n                RGraph.TWOPI,\n                typeof properties.endsColor === 'string' ? properties.endsColor : properties.colors[0]\n            );\n\n\n\n\n            // Draw the bulb at the END of the indicator line\n            // (get the coordsinates to draw it at first).\n            var coords = RGraph.getRadiusEndPoint(\n                this.centerx,\n                this.centery,\n                angle,\n                this.radius - (properties.width / 2)\n            );\n\n\n\n\n            this.path(\n                'b lw 3 a % % % 0 % false f % s white',\n                coords[0],\n                coords[1],\n                typeof properties.endsRadius === 'number' ? properties.endsRadius : (properties.width * 1.5),\n                RGraph.TWOPI,\n                typeof properties.endsColor === 'string' ? properties.endsColor : properties.colors[0]\n            );\n\n\n            // Reset the linewidth back to 1\n            this.context.lineWidth = 1;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function draws the text labels\n        //\n        this.drawLabels = function ()\n        {\n            if (!properties.labelsCenter) {\n                return;\n            }\n\n\n            if (properties.labelsCenterSpecific) {\n                properties.labelsCenterSpecific = RGraph.labelSubstitution({\n                    object:    this,\n                    text:      properties.labelsCenterSpecific,\n                    index:     0,\n                    value:     this.value,\n                    decimals:  properties.labelsCenterSpecificFormattedDecimals  || 0,\n                    unitsPre:  properties.labelsCenterSpecificFormattedUnitsPre  || '',\n                    unitsPost: properties.labelsCenterSpecificFormattedUnitsPost || '',\n                    thousand:  properties.labelsCenterSpecificFormattedThousand  || ',',\n                    point:     properties.labelsCenterSpecificFormattedPoint     || '.'\n                });\n            }\n\n\n\n            // Get the text configuration\n            var textConf = RGraph.getTextConf({\n                object: this,\n                prefix: 'labelsCenter'\n            });\n\n            // Draw the large center label\n            RGraph.text({\n\n             object: this,\n\n                font:   textConf.font,\n                italic: textConf.italic,\n                bold:   textConf.bold,\n                size:   textConf.size,\n                color:  textConf.color,\n\n                  x: this.centerx + properties.labelsCenterOffsetx,\n                  y: this.centery + properties.labelsCenterOffsety,\n\n               text: properties.labelsCenterSpecific ? properties.labelsCenterSpecific : RGraph.numberFormat({\n                   object:    this,\n                   number:    this.value.toFixed(properties.labelsCenterDecimals),\n                   unitspre:  properties.labelsCenterUnitsPre,\n                   unitspost: properties.labelsCenterUnitsPost,\n                   point:     properties.labelsCenterPoint,\n                   thousand:  properties.labelsCenterThousand\n               }),\n\n             halign: 'center',\n             valign: 'center',\n\n         accessible: properties.textAccessible\n            });\n        };\n\n\n\n\n\n\n\n\n        //\n        // A placeholder function\n        // \n        // @param object The event object\n        //\n        this.getShape = function (e) {};\n\n\n\n\n\n\n\n\n        //\n        // This function returns the pertinent value for a particular click (or other mouse event)\n        // \n        // @param obj e The event object\n        //\n        this.getValue = function (e)\n        {\n            if (typeof e === 'number') {\n                var angle = e;\n                    angle += RGraph.HALFPI;\n            } else {\n                var mouseXY = RGraph.getMouseXY(e);\n                \n                var angle   = RGraph.getAngleByXY(\n                    this.centerx,\n                    this.centery,\n                    mouseXY[0],\n                    mouseXY[1]\n                );\n            \n                // Adjust the angle because canvas angles\n                // start at the east axis\n                angle += RGraph.HALFPI;\n                if (angle > RGraph.TWOPI) {\n                    angle -= RGraph.TWOPI;\n                }\n            }\n\n            // Calculate the value based on the angle and min/max values\n            var value = ((angle / RGraph.TWOPI) * (this.max - this.min)) + this.min;\n\n            // Ensure that the value is in range\n            value = Math.max(value, this.min);\n            value = Math.min(value, this.max);\n\n            return value;\n        };\n\n\n\n\n\n\n\n\n        //\n        // The getObjectByXY() worker method. Don't call this call:\n        // \n        // RGraph.ObjectRegistry.getObjectByXY(e)\n        // \n        // @param object e The event object\n        //\n        this.getObjectByXY = function (e)\n        {\n            var mouseXY = RGraph.getMouseXY(e);\n    \n            // Work out the radius\n            var radius = RGraph.getHypLength(\n                this.centerx,\n                this.centery,\n                mouseXY[0],\n                mouseXY[1]\n            );\n            \n            if (radius > this.radius) {\n                return null;\n            }\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This method handles the adjusting calculation for when the mouse is moved\n        // \n        // @param object e The event object\n        //\n        this.adjusting_mousemove = function (e)\n        {\n            //\n            // Handle adjusting for the Bar\n            //\n            if (properties.adjustable && RGraph.Registry.get('adjusting') && RGraph.Registry.get('adjusting').uid == this.uid) {\n                this.value = this.getValue(e);\n                RGraph.clear(this.canvas);\n                RGraph.redrawCanvas(this.canvas);\n                RGraph.fireCustomEvent(this, 'onadjust');\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This method returns the appropriate angle for a value\n        // \n        // @param number value The value\n        //                   OR\n        //        object value An event object\n        //\n        this.getAngle = function (value)\n        {\n            if (typeof value === 'number') {\n                \n                // Higher than max\n                if (value > this.max || value < this.min) {\n                    return null;\n                }\n    \n                var angle = (((value - this.min) / (this.max - this.min)) * RGraph.TWOPI) - RGraph.HALFPI;\n            \n            // An event object has been given\n            } else {\n                var mouseX = value.offsetX,\n                    mouseY = value.offsetY;\n    \n                var angle = RGraph.getAngleByXY({\n                    cx: this.centerx,\n                    cy: this.centery,\n                    x:  mouseX,\n                    y:  mouseY\n                });\n            }\n\n            if (value === this.max) angle -= 0.00001;\n            if (value === this.min) angle += 0.00001;\n            \n            if (angle > (RGraph.PI + RGraph.HALFPI) ) {\n                angle -= RGraph.TWOPI;\n            }\n            \n            return angle;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for easy specification of gradients\n        //\n        this.parseColors = function ()\n        {\n            // Save the original colors so that they can be restored when the canvas is reset\n            if (this.original_colors.length === 0) {\n                this.original_colors.backgroundColor  = RGraph.arrayClone(properties.backgroundColor);\n                this.original_colors.colors           = RGraph.arrayClone(properties.colors);\n            }\n\n            // Parse the background color\n            properties.backgroundColor = this.parseSingleColorForGradient(properties.backgroundColor);\n\n    \n            // Parse colors\n            var colors = properties.colors;\n\n            if (colors && colors.length) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = this.parseSingleColorForGradient(colors[i]);\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Use this function to reset the object to the post-constructor state. Eg reset colors if\n        // need be etc\n        //\n        this.reset = function ()\n        {\n        };\n\n\n\n\n\n\n\n\n        //\n        // This parses a single color value\n        //\n        this.parseSingleColorForGradient = function (color)\n        {\n            if (!color || typeof color != 'string') {\n                return color;\n            }\n\n            if (color.match(/^gradient\\((.*)\\)$/i)) {\n\n                // Allow for JSON gradients\n                if (color.match(/^gradient\\(({.*})\\)$/i)) {\n                    return RGraph.parseJSONGradient({\n                        object: this,\n                        def:    RegExp.$1,\n                        radial: true\n                    });\n                }\n\n                var parts = RegExp.$1.split(':');\n                \n                // Create the gradient\n                var grad = this.context.createLinearGradient(\n                    properties.marginLeft,\n                    0,\n                    this.canvas.width - properties.marginLeft - properties.marginRight,\n                    0\n                );\n                \n                var diff = 1 / (parts.length - 1);\n                \n                grad.addColorStop(0, RGraph.trim(parts[0]));\n                \n                for (var j=1,len=parts.length; j<len; ++j) {\n                    grad.addColorStop(j * diff, RGraph.trim(parts[j]));\n                }\n            }\n    \n            return grad ? grad : color;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Using a function to add events makes it easier to facilitate method chaining\n        // \n        // @param string   type The type of even to add\n        // @param function func \n        //\n        this.on = function (type, func)\n        {\n            if (type.substr(0,2) !== 'on') {\n                type = 'on' + type;\n            }\n            \n            if (typeof this[type] !== 'function') {\n                this[type] = func;\n            } else {\n                RGraph.addCustomEventListener(this, type, func);\n            }\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function runs once only\n        // (put at the end of the file (before any effects))\n        //\n        this.firstDrawFunc = function ()\n        {\n        };\n\n\n\n\n\n\n\n\n        //\n        // Meter Grow\n        // \n        // This effect gradually increases the represented value\n        // \n        // @param              An object of options - eg: {frames: 60}\n        // @param function     An optional callback function\n        //\n        this.grow = function ()\n        {\n            // Cancel any stop request if one is pending\n            this.cancelStopAnimation();\n\n            var obj = this;\n\n            obj.currentValue = obj.currentValue || obj.min;\n\n            var opt      = arguments[0] || {},\n                frames   = opt.frames || 30,\n                frame    = 0,\n                diff     = obj.value - obj.currentValue,\n                step     = diff / frames,\n                callback = arguments[1] || function () {},\n                initial  = obj.currentValue\n\n\n\n            function iterator ()\n            {\n                if (obj.stopAnimationRequested) {\n    \n                    // Reset the flag\n                    obj.stopAnimationRequested = false;\n    \n                    return;\n                }\n\n                obj.value = initial + (frame++ * step);\n    \n                RGraph.clear(obj.canvas);\n                RGraph.redrawCanvas(obj.canvas);\n            \n                if (frame <= frames) {\n                    RGraph.Effects.updateCanvas(iterator);\n                } else {\n                    callback(obj);\n                }\n            }\n            \n            iterator();\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Couple of functions that allow you to control the\n        // animation effect\n        //\n        this.stopAnimation = function ()\n        {\n            this.stopAnimationRequested = true;\n        };\n\n        this.cancelStopAnimation = function ()\n        {\n            this.stopAnimationRequested = false;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function handles clipping to scale values. Because\n        // each chart handles scales differently, a worker function\n        // is needed instead of it all being done centrally in the\n        // RGraph.clipTo.start() function.\n        //\n        // @param string clip The clip string as supplied by the\n        //                    user in the chart configuration\n        //\n        this.clipToScaleWorker = function (clip)\n        {\n            // The Regular expression is actually done by the\n            // calling RGraph.clipTo.start() function  in the core\n            // library\n            if (RegExp.$1 === 'min') from = this.min; else from = Number(RegExp.$1);\n            if (RegExp.$2 === 'max') to   = this.max; else to   = Number(RegExp.$2);\n\n            var a1 = this.getAngle(from),\n                a2 = this.getAngle(to);\n\n            // Change the radius if the number is \"min\"\n            if (RegExp.$1 === 'min') {\n                a1 = this.getAngle(this.min);\n            }\n\n            // Change the radius if the number is \"max\"\n            if (RegExp.$2 === 'max') {\n                a2 = this.getAngle(this.max);\n            }\n\n            this.path(\n                'sa b    m % %    a % % % % % false    c cl',\n                \n                this.centerx,\n                this.centery,\n                \n                this.centerx,\n                this.centery,\n                Math.max(this.canvas.width, this.canvas.height),\n                a1, a2\n            );\n        };\n\n\n\n\n\n\n\n\n        //\n        // Register the object\n        //\n        RGraph.register(this);\n\n\n\n\n\n\n\n\n        //\n        // This is the 'end' of the constructor so if the first argument\n        // contains configuration data - handle that.\n        //\n        RGraph.parseObjectStyleConfig(this, conf.options);\n    };"],"names":[],"version":3,"file":"index.e1dc460c.js.map","sourceRoot":"/__parcel_source_root/"}